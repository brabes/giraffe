<page xmlns="http://projectmallard.org/1.0/"
      type="topic"
      id="ug-functions">
<info>
  <title type="sort">0400</title>
  <link type="guide" xref="ug-index#sml-interface"/>
</info>
<title>Functions</title>
<p>
A function is defined in either
a namespace or
a named type (class, interface, record, union, enum or bitfield).
(Although a callback is a named type, it does not define any functions.)
No function is defined at the top level, outside a namespace.
</p>
<p>
A function may be marked as a method or a constructor:
</p>
<list style="compact">
<item>
  <p>
    A function in a class or interface may be a method
    if its first argument is an instance of the class or interface.
  </p>
</item>
<item>
  <p>A function in a class or interface may be a constructor if it returns a new instance.</p>
</item>
</list>
<p>
SML has no concept of classes so
this distinction is not particularly significant
except that the instance argument of a method is treated differently in the SML interface,
as described below.
</p>

<section>
<title>Referring to functions</title>
<p>
For a function <var>some_function_name</var>
in a namespace <var>Namespace</var>,
the hierarchical SML name is
<code type="sml"><var>Namespace</var>.<var>someFunctionName</var></code>.
</p>
<example>
<p>
For example, the function shell_parse_argv
in the namespace GLib is
<code type="sml">GLib.shellParseArgv</code>.
</p>
</example>
<p>
For a function <var>some_function_name</var>
in a named type <var>Type</var>
in a namespace <var>Namespace</var>,
the hierarchical SML name is
<code type="sml"><var>Namespace</var>.<var>Type</var>.<var>someFunctionName</var></code>.
</p>
<example>
<p>
For example, the function grab_focus
in the class Widget
in the namespace Gtk is
<code type="sml">Gtk.Widget.grabFocus</code>.
</p>
</example>
<p>
The arguments of an introspected function are
classified as &#x2018;in&#x2019;, &#x2018;out&#x2019; or &#x2018;inout&#x2019;,
indicating the direction in which the argument data flows.
To enable a function to write to &#x2018;out&#x2019; and &#x2018;inout&#x2019; arguments with the C calling convention,
such arguments are references.
In the SML interface, a function does not use references
for &#x2018;out&#x2019; and &#x2018;inout&#x2019; arguments
because its arguments contain only initial values and
the final values of are part of the returned value.
</p>
<p>
The specification of <code type="sml"><var>someFunctionName</var></code>
in the signature <code type="sml"><var>NAMESPACE</var></code> or <code type="sml"><var>NAMESPACE</var>_<var>TYPE</var></code>
has the form:
</p>
<list>
<item>
  <code type="sml">
val <var>someFunctionName</var> : <var>inTypes</var> <![CDATA[->]]> <var>retOutTypes</var>
</code>
  <p>if <code type="sml"><var>someFunctionName</var></code> is not a method;</p>
</item>
<item>
  <code type="sml">
val <var>someFunctionName</var> : <var>instanceType</var> <![CDATA[->]]> <var>inTypes</var> <![CDATA[->]]> <var>retOutTypes</var>
</code>
  <p>if <code type="sml"><var>someFunctionName</var></code> is a method of a class or interface.</p>
</item>
</list>
<p>
where
</p>
<terms>
<item>
  <title><code type="sml"><var>instanceType</var></code></title>
  <p>
    is:
  </p>
  <list>
    <item><p><code type="sml">'a class</code> for a class, which allows an instance of the class or any subclass of the class;</p></item>
    <item><p><code type="sml">t</code> for an interface;</p></item>
  </list>
</item>
<item>
  <title><code type="sml"><var>inTypes</var></code></title>
  <p>
    contains the types of the &#x2018;in&#x2019; and &#x2018;inout&#x2019; arguments,
    as a tuple if there are two or more and as <code type="sml">unit</code> if there are none;
  </p>
<!--
  <table rules="rowgroups cols">
    <tbody>
      <tr>
        <td><p>Number of &#x2018;in&#x2019; and &#x2018;inout&#x2019; arguments</p></td>
        <td><p><code type="sml"><var>inTypes</var></code></p></td>
      </tr>
    </tbody>
    <tbody>
      <tr>
        <td><p>0</p></td>
        <td><p><code type="sml">unit</code></p></td>
      </tr>
      <tr>
        <td><p>1</p></td>
        <td><p><code type="sml"><var>inType1</var></code></p></td>
      </tr>
      <tr>
        <td><p>2</p></td>
        <td><p><code type="sml"><var>inType1</var> * <var>inType2</var></code></p></td>
      </tr>
      <tr>
        <td><p>&gt; 2</p></td>
        <td><p><code type="sml"><var>inType1</var> * <var>inType2</var> * …</code></p></td>
      </tr>
    </tbody>
  </table>
-->
</item>
<item>
  <title><code type="sml"><var>retOutTypes</var></code></title>
  <p>
    contains the following types as a tuple if there are two or more and as <code type="sml">unit</code> if there are none:
  </p>
  <list>
  <item>
    <p>
      the types of the &#x2018;out&#x2019; and &#x2018;inout&#x2019; arguments, if the return type is void or there is an error &#x2018;out&#x2019; argument;
    </p>
<!--
    <table rules="rowgroups cols">
      <tbody>
        <tr>
          <td><p>Number of &#x2018;out&#x2019; and &#x2018;inout&#x2019; arguments</p></td>
          <td><p><code type="sml"><var>retOutTypes</var></code></p></td>
        </tr>
      </tbody>
      <tbody>
        <tr>
          <td><p>0</p></td>
          <td><p><code type="sml">unit</code></p></td>
        </tr>
        <tr>
          <td><p>1</p></td>
          <td><p><code type="sml"><var>outType1</var></code></p></td>
        </tr>
        <tr>
          <td><p>2</p></td>
          <td><p><code type="sml"><var>outType1</var> * <var>inType2</var></code></p></td>
        </tr>
        <tr>
          <td><p>&gt; 2</p></td>
          <td><p><code type="sml"><var>outType1</var> * <var>outType2</var> * …</code></p></td>
        </tr>
      </tbody>
    </table>
-->
  </item>
  <item>
    <p>
      the return type followed by the types of the &#x2018;out&#x2019; and &#x2018;inout&#x2019; arguments, if:
    </p>
    <list style="compact">
    <item><p>the return type is not void, and</p></item>
    <item><p>the return type is not gboolean or there are no &#x2018;out&#x2019; arguments, and</p></item>
    <item><p>there is no error &#x2018;out&#x2019; argument</p></item>
    </list>
<!--
    <table rules="rowgroups cols">
      <tbody>
        <tr>
          <td><p>Number of &#x2018;out&#x2019; and &#x2018;inout&#x2019; arguments</p></td>
          <td><p><code type="sml"><var>retOutTypes</var></code></p></td>
        </tr>
      </tbody>
      <tbody>
        <tr>
          <td><p>0</p></td>
          <td><p><code type="sml">retType</code></p></td>
        </tr>
        <tr>
          <td><p>1</p></td>
          <td><p><code type="sml">retType * <var>outType1</var></code></p></td>
        </tr>
        <tr>
          <td><p>2</p></td>
          <td><p><code type="sml">retType * <var>outType1</var> * <var>outType2</var></code></p></td>
        </tr>
        <tr>
          <td><p>&gt; 2</p></td>
          <td><p><code type="sml">retType * <var>outType1</var> * <var>outType2</var> * …</code></p></td>
        </tr>
      </tbody>
    </table>
-->
  </item>
  <item>
    <p>
      the types of the &#x2018;inout&#x2019; arguments followed by
      an optional type containing the types of the &#x2018;out&#x2019; arguments as a tuple if there are two or more,
      if the return type is gboolean and there are &#x2018;out&#x2019; arguments but none is an error &#x2018;out&#x2019; argument.
    </p>
<!--
    <table rules="rowgroups cols">
      <tbody>
        <tr>
          <td><p>Number of &#x2018;inout&#x2019; arguments</p></td>
          <td><p><code type="sml"><var>retOutTypes</var></code></p></td>
        </tr>
      </tbody>
      <tbody>
        <tr>
          <td><p>0</p></td>
          <td><p><code type="sml"><var>condOutTypes</var> option</code></p></td>
        </tr>
        <tr>
          <td><p>1</p></td>
          <td><p><code type="sml"><var>outType1</var> * <var>condOutTypes</var> option</code></p></td>
        </tr>
        <tr>
          <td><p>2</p></td>
          <td><p><code type="sml"><var>outType1</var> * <var>outType2</var> * <var>condOutTypes</var> option</code></p></td>
        </tr>
        <tr>
          <td><p>&gt; 2</p></td>
          <td><p><code type="sml"><var>outType1</var> * <var>outType2</var> * … * <var>condOutTypes</var> option</code></p></td>
        </tr>
      </tbody>
    </table>
    <table rules="rowgroups cols">
      <tbody>
        <tr>
          <td><p>Number of &#x2018;out&#x2019; arguments</p></td>
          <td><p><code type="sml"><var>condOutTypes</var></code></p></td>
        </tr>
      </tbody>
      <tbody>
        <tr>
          <td><p>1</p></td>
          <td><p><code type="sml"><var>condOutType1</var></code></p></td>
        </tr>
        <tr>
          <td><p>2</p></td>
          <td><p><code type="sml"><var>condOutType1</var> * <var>condOutType2</var></code></p></td>
        </tr>
        <tr>
          <td><p>&gt; 2</p></td>
          <td><p><code type="sml"><var>condOutType1</var> * <var>condOutType2</var> * …</code></p></td>
        </tr>
      </tbody>
    </table>
-->
  </item>
  </list>
</item>
</terms>
<p>
The section <link xref="#calling-functions"/>, below, provides examples showing instantiations of these types.
</p>
<example>

</example>

<section>
<title>Correspondence with C function names</title>
<p>
In C libraries that support GObject Introspection, function names have a hierarchical form that corresponds to the hierarchical SML name as follows:
</p>
<table>
  <thead>
    <tr>
      <td><p>C identifier</p></td>
      <td></td>
      <td><p>SML identifier</p></td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
        <p><code><var>&#x231C;c_prefix&#x231D;</var>_<var>&#x231C;type_name&#x231D;</var>_<var>&#x231C;method_name&#x231D;</var></code></p>
      </td>
      <td><p>&#8596;</p></td>
      <td>
        <p><code><var>&#x231C;NamespaceName&#x231D;</var>.<var>&#x231C;TypeName&#x231D;</var>.<var>&#x231C;methodName&#x231D;</var></code></p>
      </td>
    </tr>
    <tr>
      <td>
        <p><code><var>&#x231C;c_prefix&#x231D;</var>_<var>&#x231C;type_name&#x231D;</var>_<var>&#x231C;constructor_name&#x231D;</var></code></p>
      </td>
      <td><p>&#8596;</p></td>
      <td>
        <p><code><var>&#x231C;NamespaceName&#x231D;</var>.<var>&#x231C;TypeName&#x231D;</var>.<var>&#x231C;constructorName&#x231D;</var></code></p>
      </td>
    </tr>
    <tr>
      <td>
        <p><code><var>&#x231C;c_prefix&#x231D;</var>_<var>&#x231C;type_name&#x231D;</var>_<var>&#x231C;function_name&#x231D;</var></code></p>
      </td>
      <td><p>&#8596;</p></td>
      <td>
        <p><code><var>&#x231C;NamespaceName&#x231D;</var>.<var>&#x231C;TypeName&#x231D;</var>.<var>&#x231C;functionName&#x231D;</var></code></p>
      </td>
    </tr>
    <tr>
      <td>
        <p><code><var>&#x231C;c_prefix&#x231D;</var>_<var>&#x231C;function_name&#x231D;</var></code></p>
      </td>
      <td><p>&#8596;</p></td>
      <td>
        <p><code><var>&#x231C;NamespaceName&#x231D;</var>.<var>&#x231C;functionName&#x231D;</var></code></p>
      </td>
    </tr>
  </tbody>
</table>
<p>
The relationship between <code><var>c_prefix</var></code> and <code><var>NamespaceName</var></code> is, in principle, arbitrary but standard libraries use a standard mapping as follows:
</p>
<table>
  <thead>
    <tr>
      <td><p><code><var>c_prefix</var></code></p></td>
      <td><p><code><var>NamespaceName</var></code></p></td>
    </tr>
  </thead>
  <tr>
    <td><p><code>g</code>, <code>glib</code></p></td>
    <td><p><code>GLib</code></p></td>
  </tr>
  <tr>
    <td><p><code>g</code></p></td>
    <td><p><code>GObject</code></p></td>
  </tr>
  <tr>
    <td><p><code>g</code></p></td>
    <td><p><code>Gio</code></p></td>
  </tr>
  <tr>
    <td><p><code>g</code></p></td>
    <td><p><code>GModule</code></p></td>
  </tr>
  <tr>
    <td><p><code>atk</code></p></td>
    <td><p><code>Atk</code></p></td>
  </tr>
  <tr>
    <td><p><code>pango</code></p></td>
    <td><p><code>Pango</code></p></td>
  </tr>
  <tr>
    <td><p><code>gdk</code></p></td>
    <td><p><code>Gdk</code>, <code>GdkX11</code></p></td>
  </tr>
  <tr>
    <td><p><code>gtk</code></p></td>
    <td><p><code>Gtk</code></p></td>
  </tr>
  <tr>
    <td><p><code>gtk_source</code></p></td>
    <td><p><code>GtkSource</code></p></td>
  </tr>
</table>
<p>
The relationship between other placeholders is simply the difference in character case and separator convention as indicated by the placeholder names.
For instance, <code><var>type_name</var></code> and <code><var>TypeName</var></code> represent identifiers containing the same words where
</p>
<list type="none" style="compact">
<item><p><code><var>type_name</var></code> indicates that all words are lowercase and separated by underscore characters;</p></item>
<item><p><code><var>TypeName</var></code> indicates that all words have an uppercase initial character and lowercase subsequent characters and are not separated by any character.</p></item>
</list>
<example>
<p>
For example, to convert a C identifier to an SML identifier, first split the name into its hierarchical components and then convert each field:
</p>
<table>
  <thead>
    <tr>
      <td><p>C identifier</p></td>
      <td></td>
      <td></td>
      <td></td>
      <td><p>SML identifier</p></td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><p><code>g_io_add_watch</code></p></td>
      <td><p>&#8596;</p></td>
      <td><p><code>g.io_add_watch</code></p></td>
      <td><p>&#8596;</p></td>
      <td><p><code>GLib.ioAddWatch</code></p></td>
    </tr>
    <tr>
      <td><p><code>gtk_text_buffer_insert_at_cursor</code></p></td>
      <td><p>&#8596;</p></td>
      <td><p><code>gtk.text_buffer.insert_at_cursor</code></p></td>
      <td><p>&#8596;</p></td>
      <td><p><code>Gtk.TextBuffer.insertAtCursor</code></p></td>
    </tr>
  </tbody>
</table>
</example>
</section>
</section>

<section id="calling-functions">
<title>Calling functions</title>
<p>

</p>

<section>
<title>Non-method functions</title>
<p>
For a non-method introspected function, the corresponding SML function takes a tuple
for the inputs containing the (before) value of
the &#x2018;in&#x2019; and &#x2018;inout&#x2019; arguments and returns a tuple
for the outputs containing the return value, if the return type is
neither void nor gboolean,
followed by the (after) values of
the non-error &#x2018;out&#x2019; and &#x2018;inout&#x2019; arguments.
</p>
<example>
<p>
For example, given a call to a non-method C function <code type="c"><var>f</var></code> as follows:
</p>
<code type="c">
<var>ret</var> = <var>f</var> (<var>in1</var>, &amp;<var>inout2</var>, &amp;<var>out3</var>, &amp;<var>out4</var>, <var>in5</var>, &amp;<var>error</var>);
</code>
<p>
the corresponding SML function could be called as follows:
</p>
<code type="sml">
val (<var>ret</var>, <var>inout2'</var>, <var>out3</var>, <var>out4</var>) = <var>f</var> (<var>in1</var>, <var>inout2</var>, <var>in5</var>)
</code>
<p>
Note that the argument <code type="c"><var>error</var></code> is not treated like a normal &#x2018;out&#x2019; argument in SML
as described in the section <link xref="#errors"/>, below.
</p>
</example>
<p>
If the return type is void, no return value is included in the returned tuple.
</p>
<example>
<p>
For example, if the return type of <code type="c"><var>f</var></code> is void,
the corresponding SML function could be called as follows:
</p>
<code type="sml">
val (<var>inout2'</var>, <var>out3</var>, <var>out4</var>) = <var>f</var> (<var>in1</var>, <var>inout2</var>, <var>in5</var>)
</code>
</example>
<p>
A tuple must have two or more elements.
Therefore, if the input or output tuple would have:
</p>
<list style="compact">
<item><p>no elements, it is replaced by the unit value <code type="sml">()</code>;</p></item>
<item><p>one element, it is replaced by that element.</p></item>
</list>
<example>
<p>
For example, if an introspected function <var>get_x</var> has no arguments and has a non-void return type,
the corresponding SML function could be called as follows:
</p>
<code type="sml">
val x = <var>getX</var> ()
</code>
<p>
and if an introspected function <var>set_x</var> has one &#x2018;in&#x2019; argument and has return type void,
the corresponding SML function could be called as follows:
</p>
<code type="sml">
val () = <var>setX</var> x
</code>
</example>
</section>

<section id="method-functions">
<title>Method functions</title>
<p>
For a method function, the corresponding SML function takes
the instance object as an initial curried argument and returns
an SML function that takes the remaining arguments as described above for a non-method function.
</p>
<example>
<p>
For example, given a call to a method <var>m</var> on an object <var>obj</var> in C as follows:
</p>
<code type="c">
<var>ret</var> = <var>m</var> (<var>obj</var>, <var>in1</var>, &amp;<var>inout2</var>, &amp;<var>out3</var>, &amp;<var>out4</var>, <var>in5</var>, &amp;<var>error</var>);
</code>
<p>
the corresponding SML function could be called as follows:
</p>
<code type="sml">
val (<var>ret</var>, <var>inout2'</var>, <var>out3</var>, <var>out4</var>) = <var>m</var> <var>obj</var> (<var>in1</var>, <var>inout2</var>, <var>in5</var>)
</code>
</example>
<p>
There is no partial evaluation after applying the SML function to just the instance argument.
</p>
<p>
If the method function is defined in an interface
but the instance argument has the type of a class that implements the interface,
the instance argument must be converted explicitly as described by the section <link xref="ug-types#implemented-interfaces"/>.
</p>
<example>
<p>
For example,
if the method function <var>m</var>
is from an interface <var>Iface</var> in a namespace <var>IfaceNamespace</var>
and <var>obj</var> has the type of a class <var>Class</var> in a namespace <var>ClassNamespace</var>
that implements the interface,
the SML function <code type="sml"><var>m</var></code>
could be called as follows:
</p>
<code type="sml">
val (<var>ret</var>, <var>inout2'</var>, <var>out3</var>, <var>out4</var>) = <var>m</var> (<var>ClassNamespace</var>.<var>Class</var>.as<var>Iface</var> <var>obj</var>) (<var>in1</var>, <var>inout2</var>, <var>in5</var>)
</code>
</example>

</section>

<section>
<title>Argument types</title>
<p>
The SML type of an argument or the return value is based on the corresponding C type as described in <link xref="ug-types"/>.
</p>
<p>
If an argument or return value has an introspection annotation that marks it as optional,
its SML type is <code type="sml"><var>t</var> option</code>
where <code type="sml"><var>t</var></code>
is the SML type corresponding to the C type of the argument.
</p>

<section id="object-types">
<title>Object types</title>
<p>
An object value that is an instance of any subclass of <var>C</var>
is guaranteed to be an instance of a class <var>C</var>.
To avoid the need to explicitly upcast object values,
the object type for a class <var>C</var> or any subclass of <var>C</var> is
used where an instance of class <var>C</var> occurs in
</p>
<list style="compact">
<item><p>the argument of a constructor, method or function and</p></item>
<item><p>the result of a callback function</p></item>
</list>
<p>
Conversely, an object value that is guaranteed to be an instance of a class <var>C</var>
is not guaranteed to be an instance of any subclass of <var>C</var>.
Therefore the object type for a class <var>C</var> but <em>not</em> a subclass of <var>C</var> is
used where an instance of class <var>C</var> occurs in
</p>
<list style="compact">
<item><p>the result of a constructor, method or function and</p></item>
<item><p>the argument of a callback function</p></item>
</list>
</section>
</section>

<section>
<title>Unsupported arguments</title>
<p>
An introspected function may allow &#x2018;out&#x2019; (and, possibly, &#x2018;inout&#x2019;) arguments
to be omitted when called by passing a null reference.
The corresponding SML function does not omit any argument so the introspected function
is called with all arguments.
</p>
<p>
Introspected functions that use varargs have no SML equivalent.
Alternative functions should be available that provide the same capablity.
</p>
</section>

<section id="conditional-out-arguments">
<title>Conditional &#x2018;out&#x2019; arguments</title>
<p>
An introspected function may write to &#x2018;out&#x2019; arguments conditionally.
To avoid uninitialized values in SML, the value of an &#x2018;out&#x2019; argument
is not returned by the corresponding SML funtion when it is not written.
</p>
<note style="tip">
<p>
At present, a heuristic must be used to determine which &#x2018;out&#x2019; arguments
are written conditionally
because GObject introspection annotations do not specify this information.
</p>
<list>
<item><p>
For an introspected function without an error argument that does not have return type gboolean,
all &#x2018;out&#x2019; arguments are considered to be written unconditionally.
</p></item>
<item><p>
For an introspected function without an error argument that has return type gboolean,
all &#x2018;out&#x2019; arguments are considered to be written conditionally,
being written if and only if the function returns true.
</p></item>
<item><p>
For an introspected function with an error argument,
it is assumed that if no error is raised,
all (non-error) &#x2018;out&#x2019; (and &#x2018;inout&#x2019;) arguments are written,
as described in the section <link xref="#errors"/>, below.
</p></item>
</list>
<p>
(A proposal to introduce GObject Introspection annotations that specify
the condition under which an &#x2018;out&#x2019; argument is written is given
in the comment <link href="https://bugzilla.gnome.org/show_bug.cgi?id=626721#c3"/>.)
</p>
</note>
<p>
An introspected function without an error argument whose return type is gboolean
returns a tuple for the outputs containing
an optional tuple containing the (after) values of the &#x2018;out&#x2019; arguments
conditional on the return value, which is non-nil if and only if the return value is true,
followed by the (after) values of &#x2018;inout&#x2019; arguments.
</p>
<example>
<p>
For example, given a call to a C function <code type="c"><var>h</var></code> whose return type is gboolean as follows:
</p>
<code type="c">
if (<var>h</var> (<var>in1</var>, &amp;<var>inout2</var>, &amp;<var>out3</var>, &amp;<var>out4</var>, <var>in5</var>))
{
  /* can use <var>inout2</var>, <var>out3</var>, <var>out4</var> */
  …
}
else
{
  /* can use only <var>inout2</var> */
  …
}
</code>
<p>
the corresponding SML function could be called as follows:
</p>
<code type="sml">
let
  val (<var>inout2'</var>, condOuts) = <var>h</var> (<var>in1</var>, <var>inout2</var>, <var>in5</var>)
in
  case condOuts of
    SOME (<var>out3</var>, <var>out4</var>) => …
  | NONE => …
end
</code>
</example>
<p>
A tuple must have two or more elements.
Therefore, if the tuple for the conditional outputs would have one element, it is replaced by that element.
</p>

</section>

</section>

<section id="errors">
<title>Errors</title>
<p>
A C function reports an error by including an &#x2018;out&#x2019; argument
of type <code type="c">GError *</code>
as the last argument.
(The extra level of indirection for an &#x2018;out&#x2019; argument means that
the C type will actually be <code type="c">GError **</code>.)
</p>
<example>
<p>
For example, the declaration of the non-method C function <code type="c"><var>f</var></code> mentioned in an earlier example,
which case raise an error, is as follows:
</p>
<code type="c">
<var>ty</var>
<var>f</var> (<var>ty1</var>      <var>in1</var>,
   <var>ty2</var>     *<var>inout2</var>,
   <var>ty3</var>     *<var>out3</var>,
   <var>ty4</var>     *<var>out4</var>,
   <var>ty5</var>      <var>in5</var>,
   GError **error);
</code>
</example>
<p>
An error is raised by a C function if the (after) value of the error &#x2018;out&#x2019; argument is a reference to a GError.
Otherwise no error is raised.
</p>
<example>
<p>
For example, the C function <code type="c"><var>f</var></code> could be called as follows,
assuming the return type <code type="c"><var>ty</var></code> is not void:
</p>
<code type="c">
GError *error = NULL;

<var>ret</var> = <var>f</var> (<var>in1</var>, &amp;<var>inout2</var>, &amp;<var>out3</var>, &amp;<var>out4</var>, <var>in5</var>, &amp;error);

if (error != NULL)
  {
    /* handle error, cannot use <var>ret</var>, <var>inout2</var>, <var>out3</var> and <var>out4</var> */
    …
  }
else
  {
    /* no error, can use <var>ret</var>, <var>inout2</var>, <var>out3</var> and <var>out4</var> */
    …
  }
</code>
</example>
<p>
If an error is raised, the corresponding SML function raises
the exception <code type="sml">GLib.Error (<var>ex</var>, <var>error</var>)</code>
where
</p>
<list style="compact">
<item><p><code type="sml"><var>ex</var></code> of type <code type="sml">exn</code> is the error exception, which allows the domain and code to be pattern matched</p></item>
<item><p><code type="sml"><var>error</var></code> of type <code type="sml">GLib.Error.t</code> is the (after) value of the error &#x2018;out&#x2019; argument.</p></item>
</list>
<p>
Therefore, the SML function provides neither
the return value nor the (after) values of non-error &#x2018;out&#x2019; and &#x2018;inout&#x2019; arguments
of the corresponding introspected function if an error is raised:
it is assumed that these provide no information further to the error.
</p>
<p>
The SML function returns a tuple for the outputs containing
the return value, if the return type is neither void nor gboolean,
followed by the (after) values of
the non-error &#x2018;out&#x2019; and &#x2018;inout&#x2019; arguments.
</p>
<example>
<p>
For example, the SML function corresponding to C function <code type="c"><var>f</var></code> could be called as follows:
</p>
<code type="sml">
let
  val (<var>ret</var>, <var>inout2'</var>, <var>out3</var>, <var>out4</var>) = <var>f</var> (<var>in1</var>, <var>inout2</var>, <var>in5</var>)
in
  …
end
  handle
    GLib.Error (_, error) => …
</code>
</example>
<p>
As the tuple of outputs is returned by the SML function only if no exception is raised,
it does not include the (after) value of the error &#x2018;out&#x2019; argument
because it would never contain an error.
Also,
the return value in the output tuple never has an error-specific value
so it is not included in the output tuple if the return type is gboolean
because it is assumed that a boolean return value indicates success, i.e. no error,
so would always return true.
The non-error &#x2018;out&#x2019; arguments are assumed to be written unconditionally so
the section <link xref="#conditional-out-arguments"/> does not apply if there is an error &#x2018;out&#x2019; argument.
</p>
<example>
<p>
For example, the C function <code type="c"><var>f</var></code> could be called as follows
if the return type <code type="c"><var>ty</var></code> is gboolean (i.e. the return value indicates success):
</p>
<code type="c">
GError *error = NULL;

if (!<var>f</var> (<var>in1</var>, &amp;<var>inout2</var>, &amp;<var>out3</var>, &amp;<var>out4</var>, <var>in5</var>, &amp;error))
  {
    /* handle error, cannot use <var>inout2</var>, <var>out3</var> and <var>out4</var> */
    …
  }
else
  {
    /* no error, can use <var>inout2</var>, <var>out3</var> and <var>out4</var> */
    …
  }
</code>
<p>
and the corresponding SML function could be called as follows:
</p>
<code type="sml">
let
  val (<var>inout2'</var>, <var>out3</var>, <var>out4</var>) = <var>f</var> (<var>in1</var>, <var>inout2</var>, <var>in5</var>)
in
  …
end
  handle
    GLib.Error (_, error) => …
</code>
</example>

</section>

</page>
