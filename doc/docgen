#! /bin/sh

DOCGEN_REL_DIR=$(dirname "$0")
if [ "${DOCGEN_REL_DIR}" = "." ]
then
  DOCGEN_REL_DIR_PREFIX=
else
  DOCGEN_REL_DIR_PREFIX="${DOCGEN_REL_DIR}/"
fi

CSS=C.css

RELEASES_DIR=releases
EXAMPLES_DIR=examples
SITE_DIR=site

TMP_DIR="/tmp"
OUT_SITE_DIR="${TMP_DIR}/${SITE_DIR}"

PUBLISH_SITE_DIR=giraffelibrary.org

try_merge_tool () {
  SOURCE_DIR="$1"
  TARGET_DIR="$2"

  if [ -z "${MERGE}" ]
  then
    echo
    echo "Environment variable MERGE not set; no merge tool available."
  else
    if [ ! -x "${MERGE}" ]
    then
      echo
      echo "Environment variable MERGE does not specify an executable file."
    else
      while true
      do
        printf "Run merge tool? [y/N] "
        read -r ANSWER
        if [ "x${ANSWER}" = "xy" ] || [ "x${ANSWER}" = "xY" ]
        then
          echo "Running ${MERGE} ${SOURCE_DIR} ${TARGET_DIR}"
          "${MERGE}" "${SOURCE_DIR}" "${TARGET_DIR}"
          break
        elif [ "x${ANSWER}" = "xn" ] || [ "x${ANSWER}" = "xN" ] || [ "x${ANSWER}" = "x" ]
        then
          break
        fi
      done
    fi
  fi
}

update () {
  INDENT="  "
  DIFF_EXISTS=
  SOURCE_DIR="$1"
  TARGET_DIR="$2"

  if [ ! -d "${SOURCE_DIR}" ]
  then
    echo "Error: source directory ${SOURCE_DIR} does not exist"
    exit 1
  fi

  if [ ! -d "${TARGET_DIR}" ]
  then
    echo "Error: target directory ${TARGET_DIR} does not exist"
    exit 1
  fi

  SOURCE_NAME_LEN_MAX=$((1 + ${#SOURCE_DIR}))
  for SOURCE in "${SOURCE_DIR}"/*.*
  do
    NAME=$(basename "${SOURCE}")
    NAME_LEN=$((${#INDENT} + ${#NAME}))
    if [ ${SOURCE_NAME_LEN_MAX} -lt ${NAME_LEN} ]
    then
      SOURCE_NAME_LEN_MAX=${NAME_LEN}
    fi
  done

  TARGET_NAME_LEN_MAX=${SOURCE_NAME_LEN_MAX}
  for TARGET in "${TARGET_DIR}"/*.*
  do
    NAME=$(basename "${TARGET}")
    NAME_LEN=$((${#INDENT} + ${#NAME}))
    if [ ${TARGET_NAME_LEN_MAX} -lt ${NAME_LEN} ]
    then
      TARGET_NAME_LEN_MAX=${NAME_LEN}
    fi
  done

  FMT="  %-${SOURCE_NAME_LEN_MAX}s  %-12s  %-${TARGET_NAME_LEN_MAX}s"

  # shellcheck disable=SC2059
  printf "${FMT}\n" "${SOURCE_DIR}/" "------->" "${TARGET_DIR}/"

  MATCHES=$(find "${SOURCE_DIR}" -maxdepth 1 -name '*.*' -print -quit)
  if [ -n "${MATCHES}" ]
  then
    for SOURCE in "${SOURCE_DIR}"/*
    do
      NAME=$(basename "${SOURCE}")
      TARGET="${TARGET_DIR}/${NAME}"

      if [ -e "${TARGET}" ]
      then
        if diff -rq "${TARGET}" "${SOURCE}" > /dev/null
        then
          # shellcheck disable=SC2059
          printf "${FMT}\n" "${INDENT}${NAME}" "same as" "${INDENT}${NAME}"
        else
          # shellcheck disable=SC2059
          printf "${FMT}  %-22s\n" "${INDENT}${NAME}" "differs from" "${INDENT}${NAME}" "(manual update required)"
          DIFF_EXISTS=1
        fi
      else
        if cp -an "${SOURCE}" "${TARGET}"
        then
          # shellcheck disable=SC2059
          printf "${FMT}\n" "${INDENT}${NAME}" "copied to" "${INDENT}${NAME}"
        else
          echo "error: failed to copy ${SOURCE} to ${TARGET}"
        fi
      fi
    done
  fi

  MATCHES=$(find "${TARGET_DIR}" -maxdepth 1 -name '*.*' -print -quit)
  if [ -n "${MATCHES}" ]
  then
    for TARGET in "${TARGET_DIR}"/*
    do
      NAME=$(basename "${TARGET}")
      SOURCE="${SOURCE_DIR}/${NAME}"

      if [ ! -e "${SOURCE}" ]
      then
        printf "${FMT}  %-22s\n" "${INDENT}<>" "differs from" "${INDENT}${NAME}" "(manual delete required)"
        DIFF_EXISTS=1
      fi
    done
  fi

  if [ -n "${DIFF_EXISTS}" ]
  then
    echo
    echo "Differences exist; manual update required."
    try_merge_tool "${SOURCE_DIR}" "${TARGET_DIR}"
  fi
}

YELP_BUILD=$(which yelp-build 2> /dev/null)
if [ -z "$YELP_BUILD" ]
then
  echo "error: yelp-build not found in the path"
  exit 2
fi


################################################################################
# Process arguments

# Command

RELEASES=
REMOVE_RELEASES=
SITE=
UPDATE_SITE=
PUBLISH_SITE=
SHOW_HELP=

if [ $# != 0 ]
then
  case "$1" in
  releases)
    shift
    if [ $# != 0 ]
    then
      RELEASES=$1
      shift
    else
      echo "error: releases directory not specified"
      SHOW_HELP=4
    fi
    ;;
  remove-releases)
    REMOVE_RELEASES=1
    shift
    ;;
  site)
    SITE=1
    shift
    ;;
  update-site)
    UPDATE_SITE=1
    shift
    ;;
  publish-site)
    PUBLISH_SITE=1
    shift
    ;;
  help)
    SHOW_HELP=${SHOW_HELP:-0}
    shift
    ;;
  *)
    echo "error: unrecognized command \"$1\""
    SHOW_HELP=2
    shift
    ;;
  esac
else
  echo "error: no command specified"
  SHOW_HELP=1
fi

# If no error so far, check for unused arguments.
if [ "${SHOW_HELP:-0}" = "0" ] && [ $# != 0 ]
then
  echo "error: too many arguments"
  SHOW_HELP=3
fi

if [ -n "${SHOW_HELP}" ]
then
  cat << EOF

Usage: $0 COMMAND

Commands
  releases DIR      generate symbolic link to releases directory DIR [${DOCGEN_REL_DIR_PREFIX}${RELEASES_DIR}]
  remove-releases   remove symbolic link to releases directory

  site              generate site [${OUT_SITE_DIR}]
  update-site       update working directory [${DOCGEN_REL_DIR_PREFIX}${SITE_DIR}]
  publish-site      update local site [${DOCGEN_REL_DIR_PREFIX}${PUBLISH_SITE_DIR}]
  help              show this help

EOF
  exit ${SHOW_HELP}
fi


################################################################################
#

# releases

if [ -n "${RELEASES}" ]
then
  # Check that ${RELEASES} is a directory.
  if [ ! -d "${RELEASES}" ]
  then
    echo "error: '${RELEASES}' is not a directory"
    exit 10
  fi

  # Create ${DOCGEN_REL_DIR}/${RELEASES_DIR} as a symbolic link to ${RELEASES}.
  if [ -e "${DOCGEN_REL_DIR}/${RELEASES_DIR}" ]
  then
    # ${DOCGEN_REL_DIR}/${RELEASES_DIR} already exists and...
    if [ "${RELEASES}" -ef "${DOCGEN_REL_DIR}/${RELEASES_DIR}" ]  # both Bash and Dash support -ef
    then
      # ...${DOCGEN_REL_DIR}/${RELEASES_DIR} is the same as ${RELEASES}: nothing to do.
      echo "Nothing to do: file '${DOCGEN_REL_DIR_PREFIX}${RELEASES_DIR}' is the same as directory '${RELEASES}'"
    else
      # ...${DOCGEN_REL_DIR}/${RELEASES_DIR} is not the same as ${RELEASES}: error.
      echo "error: file '${DOCGEN_REL_DIR_PREFIX}${RELEASES_DIR}' exists and differs from directory '${RELEASES}'"
      exit 11
    fi
  else
    # ${DOCGEN_REL_DIR}/${RELEASES_DIR} does not already exist: create it.
    REL_RELEASES=$(realpath --relative-to="${DOCGEN_REL_DIR}" "${RELEASES}")
    echo "Creating symboling link '${DOCGEN_REL_DIR_PREFIX}${RELEASES_DIR}' to '${REL_RELEASES}'"
    ln -s -T "${REL_RELEASES}" "${DOCGEN_REL_DIR}/${RELEASES_DIR}"
  fi
fi


# remove-releases

if [ -n "${REMOVE_RELEASES}" ]
then
  if [ -e "${DOCGEN_REL_DIR}/${RELEASES_DIR}" ]
  then
    # Remove ${DOCGEN_REL_DIR}/${RELEASES_DIR} if it is a symbolic link.
    if [ -h "${DOCGEN_REL_DIR}/${RELEASES_DIR}" ]
    then
      echo "Removing symbolic link '${DOCGEN_REL_DIR_PREFIX}${RELEASES_DIR}'"
      rm -f "${DOCGEN_REL_DIR}/${RELEASES_DIR}"
    else
      echo "error: '${DOCGEN_REL_DIR_PREFIX}${RELEASES_DIR}' is not a symbolic link"
      exit 12
    fi
  else
    echo "Nothing to do: '${DOCGEN_REL_DIR_PREFIX}${RELEASES_DIR}' does not exist"
  fi
fi


# site

if [ -n "${SITE}" ]
then
  # Check that ${DOCGEN_REL_DIR}/${RELEASES_DIR} contains a directory for every tag.
  MISSING_TAG=
  for TAG in $(git tag -l)
  do
    if [ ! -d "${DOCGEN_REL_DIR}/${RELEASES_DIR}/${TAG}" ]
    then
      if [ -z "${MISSING_TAG}" ]
      then
        MISSING_TAG=1
        echo "error: directory '${DOCGEN_REL_DIR_PREFIX}${RELEASES_DIR}' does not contain a directory for tags listed below"
      fi
      echo "  ${TAG}"
    fi
  done
  [ -z "${MISSING_TAG}" ] || exit 20

  # Rename any existing ${OUT_SITE_DIR}.
  if [ -e "${OUT_SITE_DIR}" ]
  then
    # Find highest N for which ${OUT_SITE_DIR}.${N} already exists.
    N=0
    for OUT_DIR in "${OUT_SITE_DIR}".*
    do
      I="${OUT_DIR#${OUT_SITE_DIR}.}"
      case "${I}" in
        (*[!0-9]*) ;;  # ${I} does not contain only digits
        (*) 
          if [ "${I}" -gt "${N}" ]
          then
            N="${I}"
          fi
      esac
    done
    # Rename existing output directory using suffix <N+1>.
    NEW_DIR="${OUT_SITE_DIR}.$((N+1))"
    echo "Renaming existing output directory '${OUT_SITE_DIR}' to '${NEW_DIR}'"
    if ! mv "${OUT_SITE_DIR}" "${NEW_DIR}"
    then
      echo "error: failed to rename existing output directory '${OUT_SITE_DIR}' to '${NEW_DIR}'"
      exit 21
    fi
  fi

  echo "Creating output directory '${OUT_SITE_DIR}'"
  mkdir "${OUT_SITE_DIR}"

  echo "Generating documentation in '${OUT_SITE_DIR}'"
  if ! "${YELP_BUILD}" html -o "${OUT_SITE_DIR}" \
                                  "${DOCGEN_REL_DIR}/src"/*.page \
                                  "${DOCGEN_REL_DIR}/src"/*-guide \
                                  "${DOCGEN_REL_DIR}/${EXAMPLES_DIR}"/*/*.page
  then
    echo "error: ${YELP_BUILD} failed"
    exit 22
  fi
  if ! cp -p -t "${OUT_SITE_DIR}" "${DOCGEN_REL_DIR}/src/${CSS}"
  then
    echo "error: failed to copy '${DOCGEN_REL_DIR_PREFIX}src/${CSS}' to directory '${OUT_SITE_DIR}'"
    exit 23
  fi

  echo "Creating releases output directory '${OUT_SITE_DIR}/${RELEASES_DIR}'"
  if ! cp -aL -t "${OUT_SITE_DIR}" "${DOCGEN_REL_DIR}/${RELEASES_DIR}"
  then
    echo "error: failed to copy '${DOCGEN_REL_DIR_PREFIX}${RELEASES_DIR}' to directory '${OUT_SITE_DIR}'"
    exit 24
  fi

  if [ -d "${DOCGEN_REL_DIR}/${EXAMPLES_DIR}" ]
  then
    echo "Creating examples output directory '${OUT_SITE_DIR}/${EXAMPLES_DIR}'"
    mkdir "${OUT_SITE_DIR}/${EXAMPLES_DIR}"

    echo "Copying files to examples output directory '${OUT_SITE_DIR}/${EXAMPLES_DIR}'"
    (
      if ! cd "${DOCGEN_REL_DIR}/${EXAMPLES_DIR}"
      then
        echo "error: cannot access directory '${DOCGEN_REL_DIR_PREFIX}${EXAMPLES_DIR}'"
        exit 25
      fi

      for EG_DIR in *
      do
        if [ -d "${EG_DIR}" ]
        then
          # Ensure creation of a TAR.GZ file is a function of the files it contains.
          # In the TAR file, set the timestamp of every file to the timestamp of the
          # most recent commit that affected any of the files.  If there is no such
          # commit, use a timestamp of @0, i.e. the epoch.
          MTIME=$(git log --max-count=1 --pretty=format:%at HEAD -- "${EG_DIR}")
          tar --create \
              --dereference \
              --sort=name \
              --owner=root:0 \
              --group=root:0 \
              --mtime="@${MTIME:-0}" \
              --exclude="${EG_DIR}/*.page" \
              "${EG_DIR}" \
            | gzip --no-name \
            > "${OUT_SITE_DIR}/${EXAMPLES_DIR}/${EG_DIR}.tar.gz"
        fi
      done
    )
  else
    echo "No examples directory '${DOCGEN_REL_DIR_PREFIX}${EXAMPLES_DIR}' found, skipping examples"
  fi
fi


# update-site

if [ -n "${UPDATE_SITE}" ]
then
  if [ ! -d "${DOCGEN_REL_DIR}/${SITE_DIR}" ]
  then
    echo "Creating ${DOCGEN_REL_DIR_PREFIX}${SITE_DIR}"
    mkdir "${DOCGEN_REL_DIR}/${SITE_DIR}"
  fi
  update "${OUT_SITE_DIR}" "${DOCGEN_REL_DIR}/${SITE_DIR}"
fi


# publish-site

if [ -n "${PUBLISH_SITE}" ]
then
  update "${DOCGEN_REL_DIR}/${SITE_DIR}" "${DOCGEN_REL_DIR}/${PUBLISH_SITE_DIR}"
fi
