=Enum=

For enumerations, there are two possible forms: a simple enumeration and an error
enumeration.  An error enumeration has addition components for the domain exception
and error handler.

Context

  repo
    the repository in use

  enumInfo
    the enumeration typelib info


Placeholders

  EnumName = GIBaseInfo.getName objectInfo

  EnumNamespace = GIBaseInfo.getNamespace objectInfo

  EnumCPrefix = GIRepository.getCPrefix repo <EnumNamespace>

  optErrorDomain = GIEnumInfo.getErrorDomain enumInfo

  optGetTypeSymbol = GIRegisteredTypeInfo.getTypeInit enumInfo

  EnumObjectNamespace =

    GObject
      if EnumNamespace = "GLib"

    EnumNamespace
      otherwise


Conditions

  isGLib    = "GLib"    = EnumNamespace

  isGObject = "GObject" = EnumNamespace


==Signature==

signature <ENUM_NAMESPACE>_<ENUM_NAME> =
  sig
    (* Types *)

    datatype enum =
      <VALUENAME[1]>
    | ...
    | <VALUENAME[V]>

    include ENUM where type t = enum

                                                                     -.
    exception Error of t                                              |
                                                    -.                |
    type error_handler                               | isGLib         |
    val handler : error_handler                      |                | optErrorDomain is SOME _
                                                    -'                |
                                                    -.                |
    val handler : GLib.ErrorRecord.handler           | not isGLib     |
                                                    -'               -'
                                                                     -.
    val t : t ValueAccessor.t                                         | optGetTypeSymbol is SOME _
                                                                     -'

    type <varlist[1]> <local_name[1]>

    ...

    type <varlist[N]> <local_name[N]>


    (* Functions *)
                                                                     -.
    val getType : unit -> <type>                                      | optGetTypeSymbol is SOME _
                                                                     -'
    <FunctionSpec[1]>

    ...

    <FunctionSpec[M]>
  end


where


  type
    is defined as follows:

        GObject.Type.t
          if not isGObject

        type_t
          if isGObject


  valueName[v] is the name of the <v>th unique enumeration value;


  localName[n], typeName[n], t[n], varlist[n]
    For n in 1 .. N

      <varlist[n]> <local_name[n]>

    is the <n>th element in the list of types referenced later in the
    signature that, for some InterfaceName and some var,
    has one of the following forms:

      <var> <interface_name>_class
      <var> <interface_name>_union
      <interface_name>_t

    where the corresponding global type has the form

      <EnumNamespace>.<TypeName[n]>.<t[n]>


==Structure==

structure <EnumNamespace><EnumName> :>
  <ENUM_NAMESPACE>_<ENUM_NAME>
    where type <varlist[1]> <local_name[1]> = <varlist[1]> <EnumNamespace><TypeName[1]>.<t[1]>

    ...

    where type <varlist[N]> <local_name[N]> = <varlist[N]> <EnumNamespace><TypeName[N]>.<t[N]>
                                                                            -.
    where type error_handler = GLibErrorRecord.handler                       | isGLib andalso optErrorDomain is SOME _
                                                                            -'
=
  struct
                                                 -.             -.                         -.
    local                                         |              |                           |
      open PolyMLFFI                              |              |                           |
    in                                            |              |                           |
      val getType_ =                              |              |                           |
        call                                      | Poly/ML only |                           |
          (<getFunctionSymbol> "<getTypeSymbol>") |              |                           |
          (cVoid --> GObjectType.PolyML.cVal);    |              |                           |
    end                                           |              | getTypeSymbol <> "intern" |
                                                 -'              |                           | optGetTypeSymbol
                                                 -.              |                           |  is SOME getTypeSymbol
    val getType_ =                                |              |                           |
      _import "<getTypeSymbol>" :                 | MLton only   |                           |
        unit -> GObjectType.FFI.val_;             |              |                           |
                                                 -'              |                           |
                                                                 |                           |
    val getType = (I ---> GObjectType.FFI.fromVal) getType_      |                           |
                                                                -'                           |
                                                                -.                           |
    val getType = GObjectType.<valueType>                        | getTypeSymbol = "intern"  |
                                                                -'                          -'

    datatype enum =
      <VALUENAME[1]>
    | ...
    | <VALUENAME[V]>

    structure Enum =
      Enum(
        type enum = enum
        val null = <VALUENAME[1]>

        fun toInt =
          fn
            <VALUENAME[1]> => <valueValue[1]>
          | ...
          | <VALUENAME[V]> => <valueValue[V]>

        exception Value of GInt.t

        val fromInt =
          fn
            <valueValue[1]> => <VALUENAME[1]>
          | ...
          | <valueValue[V]> => <VALUENAME[V]>
          | n               => raise Value n
      )
    open Enum

    (* Accessor *)
                                                                            -.              -.
    local                                                                    |               |
      open PolyMLFFI                                                         |               |
    in                                                                       |               |
      val getValue_ =                                                        |               |
        call                                                                 |               |
          (<getFunctionSymbol> "g_value_get_enum")                           |               |
          (GObjectValueRecord.PolyML.cPtr --> PolyML.cVal);                  | Poly/ML only  |
                                                                             |               |
      val setValue_ =                                                        |               |
        call                                                                 |               |
          (<getFunctionSymbol> "g_value_set_enum")                           |               |
          (GObjectValueRecord.PolyML.cPtr &&> PolyML.cVal --> cVoid);        |               |
    end                                                                      |               | optGetTypeSymbol
                                                                            -'               |  is SOME getTypeSymbol
                                                                            -.               |
    val getValue_ =                                                          |               |
      _import "g_value_get_enum" : GObjectValueRecord.FFI.p -> FFI.val_;     |               |
                                                                             | MLton only    |
    val setValue_ =                                                          |               |
      _import "g_value_set_enum" : GObjectValueRecord.FFI.p * FFI.val_ -> unit;              |
                                                                            -'               |
    val t =                                                                                  |
      ValueAccessor.C.createAccessor {                                                       |
        getType  = getType,                                                                  |
        getValue = (I ---> FFI.fromVal) getValue_,                                           |
        setValue = (I &&&> FFI.withVal ---> I) setValue_                                     |
      }                                                                                      |                                                                                   
                                                                                            -'

                                                                     -.
    exception Error of t                                              |
                                                      -.              | optErrorDomain is
    type error_handler = GLibErrorRecord.handler       | isGLib       |  SOME errorDomain
                                                      -'              |
    val handler = GLibErrorRecord.makeHandler ("<errorDomain>", C.fromVal, Error)
                                                                     -'

    (* Low-Level Functions *)
                                                                                          -.
    local                                                                                  |
      open PolyMLFFI                                                                       |
    in                                                                                     |
      <LowLevelFunction[1]>                                                                |
                                                                                           | Poly/ML only
      ...                                                                                  |
                                                                                           |
      <LowLevelFunction[M]>                                                                |
    end                                                                                    |
                                                                                          -'
                                                                                          -.
    <LowLevelFunction[1]>                                                                  |
                                                                                           |
    ...                                                                                    | MLton only
                                                                                           |
    <LowLevelFunction[M]>                                                                  |
                                                                                          -'

    (* Types *)

    type <varlist[1]> <local_name[1]> = <varlist[1]> <EnumNamespace><TypeName[1]>.<t[1]>

    ...

    type <varlist[N]> <local_name[N]> = <varlist[N]> <EnumNamespace><TypeName[N]>.<t[N]>


    (* High-Level Functions *)
                                                              -. 
    val getType = (I ---> GObjectType.C.fromVal) getType_      | optGetTypeSymbol is SOME _
                                                              -'
    <HighLevelFunction[1]>

    ...

    <HighLevelFunction[M]>
  end
                                                -.
                                                 | optErrorDomain is SOME _
exception <EnumNamespace><EnumName> = <EnumNamespace><EnumName>.Error
                                                -'


where


  getFunctionSymbol
    is
      externalFunctionSymbol
        if generating from a GIR file

      getSymbol
        if generating from a TYPELIB file


  localName[n], typeName[n], t[n], varlist[n] are the same as for the signature;


  valueName[v] is the same as for the signature;


  valueValue[v] is the value of the <v>th unique enumeration value
    formatted as an SML integer literal



