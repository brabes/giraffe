=Flags=

Note that using GIRepository, flags use an enum info structure, hence this
section uses ENUM rather than FLAGS.  (The distiction between flags and enum
is made only by GIInfoType.)

Context

  repo
    the repository in use

  enumInfo
    the enumeration typelib info


Placeholders

  EnumName = GIBaseInfo.getName objectInfo

  EnumNamespace = GIBaseInfo.getNamespace objectInfo

  EnumCPrefix = GIRepository.getCPrefix repo <EnumNamespace>

  optGetTypeSymbol = GIRegisteredTypeInfo.getTypeInit enumInfo

  EnumObjectNamespace =

    GObject
      if EnumNamespace = "GLib"

    EnumNamespace
      otherwise


Conditions

  isGObject = "GObject" = EnumNamespace


==Signature==

signature <ENUM_NAMESPACE>_<ENUM_NAME> =
  sig
    (* Types *)

    include FLAGS

    val <VALUENAME[1]> : t

    ...

    val <VALUENAME[V]> : t
                                                                     -.
    val t : t ValueAccessor.t                                         | optGetTypeSymbol is SOME _
                                                                     -'

    type <varlist[1]> <local_name[1]>

    ...

    type <varlist[N]> <local_name[N]>


    (* Functions *)
                                                                     -.
    val getType : unit -> <type>                                      | optGetTypeSymbol is SOME _
                                                                     -'
    <FunctionSpec[1]>

    ...

    <FunctionSpec[M]>
  end


where


  type
    is defined as follows:

        GObject.Type.t
          if not isGObject

        type_t
          if isGObject


  valueName[v] is the name of the <v>th enumeration value;


  localName[n], typeName[n], t[n], varlist[n]
    For n in 1 .. N

      <varlist[n]> <local_name[n]>

    is the <n>th element in the list of types referenced later in the
    signature that, for some InterfaceName and some var,
    has one of the following forms:

      <var> <interface_name>_class
      <var> <interface_name>_union
      <interface_name>_t

    where the corresponding global type has the form

      <EnumNamespace>.<TypeName[n]>.<t[n]>


==Structure==

structure <EnumNamespace><EnumName> :>
  <ENUM_NAMESPACE>_<ENUM_NAME>
    where type <varlist[1]> <local_name[1]> = <varlist[1]> <EnumNamespace><TypeName[1]>.<t[1]>

    ...

    where type <varlist[N]> <local_name[N]> = <varlist[N]> <EnumNamespace><TypeName[N]>.<t[N]>
=
  struct
                                                 -.             -.                         -.
    local                                         |              |                           |
      open PolyMLFFI                              |              |                           |
    in                                            |              |                           |
      val getType_ =                              |              |                           |
        call                                      | Poly/ML only |                           |
          (<getFunctionSymbol> "<getTypeSymbol>") |              |                           |
          (cVoid --> GObjectType.PolyML.cVal);    |              |                           |
    end                                           |              | getTypeSymbol <> "intern" |
                                                 -'              |                           | optGetTypeSymbol
                                                 -.              |                           |  is SOME getTypeSymbol
    val getType_ =                                |              |                           |
      _import "<getTypeSymbol>" :                 | MLton only   |                           |
        unit -> GObjectType.FFI.val_;             |              |                           |
                                                 -'              |                           |
                                                                 |                           |
    val getType = (I ---> GObjectType.FFI.fromVal) getType_      |                           |
                                                                -'                           |
                                                                -.                           |
    val getType = GObjectType.<valueType>                        | getTypeSymbol = "intern"  |
                                                                -'                          -'

    val <VALUENAME[1]> = <valueValue[1]>

    ...

    val <VALUENAME[V]> = <valueValue[V]>

    val allFlags = [
      <VALUENAME[1]>,

      ...,

      <VALUENAME[V]>
    ]
    structure Flags =
      Flags(
        val allFlags = allFlags
      )
    open Flags


    (* Accessor *)
                                                                            -.              -.
    local                                                                    |               |
      open PolyMLFFI                                                         |               |
    in                                                                       |               |
      val getValue_ =                                                        |               |
        call                                                                 |               |
          (<getFunctionSymbol> "g_value_get_flags")                          |               |
          (GObjectValueRecord.PolyML.cPtr --> PolyML.cVal);                  | Poly/ML only  |
                                                                             |               |
      val setValue_ =                                                        |               |
        call                                                                 |               |
          (<getFunctionSymbol> "g_value_set_flags")                          |               |
          (GObjectValueRecord.PolyML.cPtr &&> PolyML.cVal --> cVoid);        |               |
    end                                                                      |               | optGetTypeSymbol
                                                                            -'               |  is SOME getTypeSymbol
                                                                            -.               |
    val getValue_ =                                                          |               |
      _import "g_value_get_flags" : GObjectValueRecord.FFI.p -> FFI.val_;    |               |
                                                                             | MLton only    |
    val setValue_ =                                                          |               |
      _import "g_value_set_flags" : GObjectValueRecord.FFI.p * FFI.val_ -> unit;             |
                                                                            -'               |
    val t =                                                                                  |
      ValueAccessor.C.createAccessor {                                                       |
        getType  = getType,                                                                  |
        getValue = (I ---> FFI.fromVal) getValue_,                                           |
        setValue = (I &&&> FFI.withVal ---> I) setValue_                                     |
      }                                                                                    |                                                                                   
                                                                                          -'


    (* Low-Level Functions *)
                                                                                          -.
    local                                                                                  |
      open PolyMLFFI                                                                       |
    in                                                                                     |
      <LowLevelFunction[1]>                                                                |
                                                                                           | Poly/ML only
      ...                                                                                  |
                                                                                           |
      <LowLevelFunction[M]>                                                                |
    end                                                                                    |
                                                                                          -'
                                                                                          -.
    <LowLevelFunction[1]>                                                                  |
                                                                                           |
    ...                                                                                    | MLton only
                                                                                           |
    <LowLevelFunction[M]>                                                                  |
                                                                                          -'

    (* Types *)

    type <varlist[1]> <typename[1]>_t = <varlist[1]> <EnumNamespace><TypeName[1]>.t

    ...

    type <varlist[N]> <typename[N]>_t = <varlist[N]> <EnumNamespace><TypeName[N]>.t


    (* High-Level Functions *)
                                                                -. 
    val getType = (I ---> GObjectType.FFI.fromVal) getType_      | optGetTypeSymbol is SOME _
                                                                -'
    <HighLevelFunction[1]>

    ...

    <HighLevelFunction[M]>
  end


where


  getFunctionSymbol
    is
      externalFunctionSymbol
        if generating from a GIR file

      getSymbol
        if generating from a TYPELIB file


  localName[n], typeName[n], t[n], varlist[n] are the same as for the signature;


  valueName[v] is the same as for the signature;


  valueValue[v] is the value of the <v>th enumeration value
    formatted as an SML word literal



