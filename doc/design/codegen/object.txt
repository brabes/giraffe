=Object=

Context

  repo
    the repository in use

  objectInfo
    the object typelib info


Placeholders

  ObjectName = GIBaseInfo.getName objectInfo

  ObjectNamespace = GIBaseInfo.getNamespace objectInfo

  ObjectCPrefix = GIRepository.getCPrefix repo <ObjectNamespace>

  getTypeSymbol = GIObjectInfo.getTypeInit objectInfo


Conditions

  isGObject = "GObject" = ObjectNamespace

  isParentNamespace = ParentObjectNamespace = ObjectNamespace


==Root class signature==



==Root class structure==



==Derived class signature==

signature <OBJECT_NAMESPACE>_<OBJECT_NAME>_CLASS =
  sig
    type 'a <object_name>
                                                               -.
    type 'a <parent_object_name>_class                          |
    include CLASS                                               | isParentNamespace
      where type 'a class = 'a <object_name> <parent_object_name>_class
                                                               -'
                                                               -.
    include CLASS                                               | not isParentNamespace
      where type 'a class = 'a <object_name> <ParentObjectNamespace>.<ParentObjectName>Class.class
                                                               -'
    val t : base class ValueAccessor.t
    val tOpt : base class option ValueAccessor.t
    val toDerived :
      'a class ValueAccessor.t -> base class -> 'a class
  end


==Derived class structure==

structure <ObjectNamespace><ObjectName>Class :>
  <OBJECT_NAMESPACE>_<OBJECT_NAME>_CLASS
                                                               -.
    where                                                       |
      type 'a <parent_object_name>_class =                      | isParentNamespace
        'a <ParentObjectNamespace><ParentObjectName>Class.class |
                                                               -'
    where type C.opt = <ParentObjectNamespace><ParentObjectName>Class.C.opt
    where type C.non_opt = <ParentObjectNamespace><ParentObjectName>Class.C.non_opt
    where type 'a C.p = 'a <ParentObjectNamespace><ParentObjectName>Class.C.p =
  struct
                                                               -.
    type 'a <parent_object_name>_class =                        |
      'a <ParentObjectNamespace><ParentObjectName>Class.class   | isParentNamespace
                                                               -'
    open <ParentObjectNamespace><ParentObjectName>Class
    type 'a <objectname> = unit
    type 'a class = 'a <object_name> class
                                                                            -.              -.
    local                                                                    |               |
      open PolyMLFFI                                                         |               |
    in                                                                       |               |
                                               -.                            |               |
      val getType_ =                            |                            |               |
        call                                    | getTypeSymbol <> "intern"  |               |
          (<getFunctionSymbol> "<getTypeSymbol>")                            | Poly/ML only  |
          (cVoid --> GObjectType.PolyML.cVal);  |                            |               |
                                               -'                            |               |
                                                                             |               |
      val getValue_ =                                                        |               |
        call                                                                 |               |
          (<getFunctionSymbol> "g_value_get_<valueType>")                    |               |
          (GObjectValueRecord.PolyML.cPtr --> PolyML.cPtr);                  |               |
                                                                             |               |
      val getOptValue_ =                                                     |               |
        call                                                                 |               |
          (<getFunctionSymbol> "g_value_get_<valueType>")                    |               |
          (GObjectValueRecord.PolyML.cPtr --> PolyML.cOptPtr);               |               |
                                                                             |               |
      val setValue_ =                                                        |               |
        call                                                                 |               |
          (<getFunctionSymbol> "g_value_set_<valueType>")                    |               |
          (GObjectValueRecord.PolyML.cPtr &&> PolyML.cPtr --> cVoid);        |               |
                                                                             |               |
      val setOptValue_ =                                                     |               |
        call                                                                 |               |
          (<getFunctionSymbol> "g_value_set_<valueType>")                    |               |
          (GObjectValueRecord.PolyML.cPtr &&> PolyML.cOptPtr --> cVoid);     |               |
    end                                                                      |               | optGetTypeSymbol
                                                                            -'               |  is SOME getTypeSymbol
                                               -.                           -.               |
    val getType_ =                              |                            |               |
      _import "<getTypeSymbol>" :               | getTypeSymbol <> "intern"  |               |
        unit -> GObjectType.FFI.val_;           |                            |               |
                                               -'                            |               |
                                                                             |               |
    val getValue_ =                                                          |               |
      _import "g_value_get_<valueType>" :                                    |               |
        GObjectValueRecord.FFI.p -> FFI.non_opt FFI.p;                       |               |
                                                                             |               |
    val getOptValue_ =                                                       |               |
      _import "g_value_get_<valueType>" :                                    |               |
        GObjectValueRecord.FFI.p -> unit FFI.p;                              | MLton only    |
                                                                             |               |
    val setValue_ =                                                          |               |
      _import "g_value_set_<valueType>" :                                    |               |
        GObjectValueRecord.FFI.p * FFI.non_opt FFI.p -> unit;                |               |
                                                                             |               |
    val setOptValue_ =                                                       |               |
      _import "g_value_set_<valueType>" :                                    |               |
        GObjectValueRecord.FFI.p * unit FFI.p -> unit;                       |               |
                                                                            -'               |
    val t =                                                                                  |
      ValueAccessor.C.createAccessor {                                                       |
                                                              -.                             |
        getType  = (I ---> GObjectType.FFI.fromVal) getType_,  | getTypeSymbol <> "intern"   |
                                                              -'                             |
                                                              -.                             |
        getType  = GObjectType.<valueType>,                    | getTypeSymbol = "intern"    |
                                                              -'                             |
        getValue = (I ---> FFI.fromPtr false) getValue_,                                     |
        setValue = (I &&&> FFI.withPtr false ---> I) setValue_                               |
      }                                                                                      |
    val tOpt =                                                                               |
      ValueAccessor.C.createAccessor {                                                       |
                                                              -.                             |
        getType  = (I ---> GObjectType.FFI.fromVal) getType_,  | getTypeSymbol <> "intern"   |
                                                              -'                             |
                                                              -.                             |
        getType  = GObjectType.<valueType>,                    | getTypeSymbol = "intern"    |
                                                              -'                             |
        getValue = (I ---> FFI.fromOptPtr false) getOptValue_,                               |
        setValue = (I &&&> FFI.withOptPtr false ---> I) setOptValue_                         |
      }                                                                                      |
                                                                                            -'
  end


where


  getFunctionSymbol
    is
      externalFunctionSymbol
        if generating from a GIR file

      getSymbol
        if generating from a TYPELIB file


  valueType
    is defined as follows:

        param<T>
          if (ObjectNamespace, ObjectName) = ("GObject", "ParamSpec<T>")

        object
          otherwise


==Object signature==

signature <OBJECT_NAMESPACE>_<OBJECT_NAME> =
  sig
    (* Local Types *)

    type 'a class

    type <varlist[1]> <local_name[1]>

    ...

    type <varlist[N]> <local_name[N]>
                                                            -.
    type 'a signal_t                                         | isGObject and S > 0
                                                            -'
                                                            -.
    type ('object_class, 'get, 'set, 'init) property_t       | isGObject and P > 0
                                                            -'

    (* Type Abbreviations *)

    type t = base class


    (* Fields *)

    <FieldSpec[1]>

    ...

    <FieldSpec[F]>


    (* Interfaces *)

    <InterfaceConvSpec[1]>

    ...

    <InterfaceConvSpec[I]>


    (* Constants *)

    <ConstantSpec[1]>

    ...

    <ConstantSpec[C]>


    (* Functions *)
                                                          -.
    val getType : unit -> <type>                           | getTypeSymbol <> "intern"
                                                          -'
    <FunctionSpec[1]>

    ...

    <FunctionSpec[M]>


    (* Signals *)

    <SignalSpec[1]>

    ...

    <SignalSpec[S]>


    (* Properties *)

    <PropertySpec[1]>

    ...

    <PropertySpec[P]>
  end


where


  type
    is defined as follows:

        GObject.Type.t
          if not isGObject

        type_t
          if isGObject


  localName[n], typeName[n], t[n], varlist[n]
    For n in 1 .. N

      <varlist[n]> <local_name[n]>

    is the <n>th element in the list of types referenced later in the
    signature that, for some InterfaceName and some var,
    has one of the following forms:

      <var> <interface_name>_class
      <var> <interface_name>_union
      <interface_name>_t

    where the corresponding global type has the form

      <ObjectNamespace>.<TypeName[n]>.<t[n]>


==Object structure==

structure <ObjectNamespace><ObjectName> :>
  <OBJECT_NAMESPACE>_<OBJECT_NAME>
    where type 'a class = 'a <ObjectNamespace><ObjectName>Class.class

    where type <varlist[1]> <local_name[1]> = <varlist[1]> <ObjectNamespace><TypeName[1]>.<t[1]>

    ...

    where type <varlist[N]> <local_name[N]> = <varlist[N]> <ObjectNamespace><TypeName[N]>.<t[N]>
                                                                                          -.
    where type 'a signal_t = 'a Signal.t                                                   | isGObject and S > 0
                                                                                          -'
                                                                                          -.
    where type ('object_class, 'get, 'set, 'init) property_t =                             | isGObject and P > 0
            ('object_class, 'get, 'set, 'init) Property.t                                  |
                                                                                          -'
=
  struct
    (* Low-Level Functions *)
                                                                            -.
    local                                                                    |
      open PolyMLFFI                                                         |
    in                                                                       |
      val getType_ =                                                         |
        call                                                                 |
          (<getFunctionSymbol> "<getTypeSymbol>")                            |
          (cVoid --> GObjectType.PolyML.cVal);                               |
                                                                             |
      <LowLevelFunction[1]>                                                  |
                                                                             | Poly/ML only
      ...                                                                    |
                                                                             |
      <LowLevelFunction[M]>                                                  |
                                                                             |
      <LowLevelFieldOffsetFunction[1]>                                       |
                                                                             |
      ...                                                                    |
                                                                             |
      <LowLevelFieldOffsetFunction[F]>                                       |
    end                                                                      |
                                                                            -'
                                                                            -.
    val getType_ = _import "<getTypeSymbol>" : unit -> GObjectType.C.val_;   |
                                                                             |
    <LowLevelFunction[1]>                                                    |
                                                                             |
    ...                                                                      |
                                                                             |
    <LowLevelFunction[M]>                                                    | MLton only
                                                                             |
    <LowLevelFieldOffsetFunction[1]>                                         |
                                                                             |
    ...                                                                      |
                                                                             |
    <LowLevelFieldOffsetFunction[F]>                                         |
                                                                            -'

    (* Local Types *)

    type 'a class = 'a <ObjectNamespace><ObjectName>Class.class

    type <varlist[1]> <local_name[1]> = <varlist[1]> <ObjectNamespace><TypeName[1]>.<t[1]>

    ...

    type <varlist[N]> <local_name[N]> = <varlist[N]> <ObjectNamespace><TypeName[N]>.<t[N]>
                                                                                          -.
    type 'a signal_t = 'a Signal.t                                                         | isGObject and S > 0
                                                                                          -'
                                                                                          -.
    type ('object_class, 'get, 'set, 'init) property_t =                                   | isGObject and P > 0
      ('object_class, 'get, 'set, 'init) Property.t                                        |
                                                                                          -'

    (* Type Abbreviations *)

    type t = base class


    (* Fields *)

    <FieldStructure[1]>

    ...

    <FieldStructure[F]>

    <FieldAccessor[1]>

    ...

    <FieldAccessor[F]>


    (* Interfaces *)

    <InterfaceConvDec[1]>

    ...

    <InterfaceConvDec[I]>


    (* Constants *)

    <ConstantDec[1]>

    ...

    <ConstantDec[C]>


    (* High-Level Functions *)
                                                          -.
    val getType = (I ---> GObjectType.C.fromVal) getType_  | getTypeSymbol <> "intern"
                                                          -'
    <HighLevelFunction[1]>

    ...

    <HighLevelFunction[M]>


    (* Signals *)

    local
      open ClosureMarshal Signal
    in
      <SignalDec[1]>
      ...
      <SignalDec[S]>
    end


    (* Properties *)

    local
      open ValueAccessor
    in
      <PropertyDec[1]>
      ...
      <PropertyDec[P]>
    end
  end


where


  getFunctionSymbol
    is
      externalFunctionSymbol
        if generating from a GIR file

      getSymbol
        if generating from a TYPELIB file


  localName[n], typeName[n], t[n], varlist[n] are the same as for the signature;


  ...



