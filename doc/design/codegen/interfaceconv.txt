=Interface Conversion=

Context

  repo
    the repository in use

  objectInfo
    the object typelib info

  interfaceInfo
    the interface typelib info


Placeholders

  ObjectName = GIBaseInfo.getName objectInfo

  ObjectNamespace = GIBaseInfo.getNamespace objectInfo

  ObjectCPrefix = GIRepository.getCPrefix repo <ObjectNamespace>

  InterfaceName = GIBaseInfo.getName interfaceInfo

  InterfaceNamespace = GIBaseInfo.getNamespace interfaceInfo

  InterfaceCPrefix = GIRepository.getCPrefix repo <InterfaceNamespace>

  optGetTypeSymbol = GIRegisteredTypeInfo.getTypeInit interfaceInfo


Conditions

  isGlobal = InterfaceNamespace <> ObjectNamespace


==Specification==

InterfaceConvSpec has the form:


  val as<InterfaceName> : 'a class -> base <InterfaceNamespace>.<InterfaceName>Class.class

    if isGlobal 


  val as<InterfaceName> : 'a class -> base <interfacename>_class

    if not isGlobal


==Declaration==

InterfaceConvDec has the form:


  local
    val conv =
      <RootObjectNamespace><RootObjectName>Class.FFI.withPtr false
        (<InterfaceNamespace><InterfaceName>Class.FFI.fromPtr false)
  in
    fun as<InterfaceName> self =
      conv (<RootObjectNamespace><RootObjectName>Class.toBase self)
  end

    rootObjectInfo = getRoot objectInfo
    RootObjectName = GIBaseInfo.getName rootObjectInfo
    RootObjectNamespace = GIBaseInfo.getNamespace rootObjectInfo
    RootObjectCPrefix = GIRepository.getCPrefix repo <RootObjectNamespace>
