(* Copyright (C) 2012 Phil Clayton <phil.clayton@veonix.com>
 *
 * This file is part of the Giraffe Library runtime.  For your rights to use
 * this file, see the file 'LICENCE.RUNTIME' distributed with Giraffe Library
 * or visit <http://www.giraffelibrary.org/licence-runtime.html>.
 *)

(**
 * The signature CALLBACK_TABLE defines an abstract data type that provides a
 * mutable association map for polymorphic values.  Unlike a general-purpose
 * association map, the keys that identify the elements cannot be specified
 * externally but are generated by the data structure: when a value is added,
 * a key that uniquely identifies the element is returned.  In practice, the
 * values added are (callback) functions and we do not care how they are
 * identified, only that they are uniquely identified.
 *
 * Note that a callback table may recycle a key when its associated element
 * is deleted.   Consequently, accidentally using a key for an element that
 * has been deleted may result in weird errors that are hard to track down.
 * Extra diligence is recommended to ensure that a key used to delete an
 * element is not used again.
 *)
signature CALLBACK_TABLE =
  sig
    (**
     * The type `id` uniquely identifies a value in the table.
     *
     * `fmtId` returns a string representation of an `id`.  Different
     * `id` values must have a different string representation.
     *)
    eqtype id
    val fmtId : id -> string

    type 'a t

    val new : unit -> 'a t
    val insert : 'a t -> 'a -> id
    val delete : 'a t -> id -> 'a option
    val lookup : 'a t -> id -> 'a option
  end
