=Interface=

An interface is modelled as an object whose parent is GObject.Object.
This is incorrect because it allows methods of GObject to be used for
an instance that implements any interface, but should not.  Currently
interfaces are used only with classes that derive from GObject.Object
so this is all right.

In future, all interfaces should derive from GInterface, a new parent
structure.


Context

  repo
    the repository in use

  interfaceInfo
    the interface typelib info


Placeholders

  InterfaceName = GIBaseInfo.getName interfaceInfo

  InterfaceNamespace = GIBaseInfo.getNamespace interfaceInfo

  InterfaceCPrefix = GIRepository.getCPrefix repo <InterfaceNamespace>

  getTypeSymbol = valOf (GIRegisteredTypeInfo.getTypeInit interfaceInfo)
                    handle Option => raise Fail "no GType for interface"


Conditions

  isGObject = "GObject" = ObjectNamespace


==Class signature==

See Object, Derived class signature.


==Class structure==

See Object, Derived class structure.


==Interface signature==

signature <INTERFACE_NAMESPACE>_<INTERFACE_NAME> =
  sig
    (* Local Types *)

    type 'a class

    type <varlist[1]> <local_name[1]>

    ...

    type <varlist[N]> <local_name[N]>
                                                            -.
    type ('object, 'a) property_readonly                     |
    type ('object, 'a) property_writeonly                    | isGObject and P > 0
    type ('object, 'a, 'b) property_readwrite                |
                                                            -'

    (* Type Abbreviations *)

    type t = base class


    (* Constants *)

    <ConstantSpec[1]>

    ...

    <ConstantSpec[C]>


    (* Functions *)

    val getType : unit -> <type>

    <FunctionSpec[1]>

    ...

    <FunctionSpec[M]>


    (* Signals *)

    <SignalSpec[1]>

    ...

    <SignalSpec[S]>


    (* Properties *)

    <PropertySpec[1]>

    ...

    <PropertySpec[P]>
  end


where


  type
    is defined as follows:

        GObject.Type.t
          if not isGObject

        type_t
          if isGObject


  localName[n], typeName[n], t[n], varlist[n]
    For n in 1 .. N

      <varlist[n]> <local_name[n]>

    is the <n>th element in the list of types referenced later in the
    signature that, for some InterfaceName and some var,
    has one of the following forms:

      <var> <interface_name>_class
      <var> <interface_name>_union
      <interface_name>_t

    where the corresponding global type has the form

      <InterfaceNamespace>.<TypeName[n]>.<t[n]>


==Interface structure==

structure <InterfaceNamespace><InterfaceName> :>
  <INTERFACE_NAMESPACE>_<INTERFACE_NAME>
    where type 'a class = 'a <InterfaceNamespace><InterfaceName>Class.class

    where type <varlist[1]> <local_name[1]> = <varlist[1]> <InterfaceNamespace><TypeName[1]>.<t[1]>

    ...

    where type <varlist[N]> <local_name[N]> = <varlist[N]> <InterfaceNamespace><TypeName[N]>.<t[N]>
                                                                                          -.
    where type ('object, 'a) property_readonly = ('object, 'a) Property.readonly           |
    where type ('object, 'a) property_writeonly = ('object, 'a) Property.writeonly         | isGObject and P > 0
    where type ('object, 'a, 'b) property_readwrite = ('object, 'a, 'b) Property.readwrite |
                                                                                          -'
=
  struct
    (* Low-Level Functions *)
                                                                            -.
    local                                                                    |
      open PolyMLFFI                                                         |
    in                                                                       |
      val getType_ =                                                         |
        call                                                                 |
          (load_sym lib<interfacenamespace> "<getTypeSymbol>")               |
          (FFI.PolyML.cVoid --> GObjectType.PolyML.cVal);                    |
                                                                             | Poly/ML only
      <LowLevelFunction[1]>                                                  |
                                                                             |
      ...                                                                    |
                                                                             |
      <LowLevelFunction[M]>                                                  |
    end                                                                      |
                                                                            -'
                                                                            -.
    val getType_ = _import "<getTypeSymbol>" : unit -> GObjectType.C.val_;   |
                                                                             |
    <LowLevelFunction[1]>                                                    |
                                                                             | MLton only
    ...                                                                      |
                                                                             |
    <LowLevelFunction[M]>                                                    |
                                                                            -'

    (* Local Types *)

    type 'a class = 'a <InterfaceNamespace><InterfaceName>Class.class

    type <varlist[1]> <local_name[1]> = <varlist[1]> <InterfaceNamespace><TypeName[1]>.<t[1]>

    ...

    type <varlist[N]> <local_name[N]> = <varlist[N]> <InterfaceNamespace><TypeName[N]>.<t[N]>
                                                                                          -.
    type ('object, 'a) property_readonly = ('object, 'a) Property.readonly                 |
    type ('object, 'a) property_writeonly = ('object, 'a) Property.writeonly               | isGObject and P > 0
    type ('object, 'a, 'b) property_readwrite = ('object, 'a, 'b) Property.readwrite       |
                                                                                          -'

    (* Type Abbreviations *)

    type t = base class


    (* Constants *)

    <ConstantDec[1]>

    ...

    <ConstantDec[C]>


    (* High-Level Functions *)

    val getType = (I ---> GObjectType.C.fromVal) getType_

    <HighLevelFunction[1]>

    ...

    <HighLevelFunction[M]>


    (* Signals *)

    local
      open ClosureMarshal Signal
    in
      <SignalDec[1]>
      ...
      <SignalDec[S]>
    end


    (* Properties *)

    local
      open Property
    in
      <PropertyDec[1]>
      ...
      <PropertyDec[P]>
    end
  end


where


  localName[n], typeName[n], t[n], varlist[n] are the same as for the signature;


  ...



