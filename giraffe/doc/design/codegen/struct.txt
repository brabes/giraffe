=Struct=

Context

  repo
    the repository in use

  structInfo
    the struct typelib info

  structType
    extra information provided as part of codegen configuration indicating the
    struct type as follows:

      ValueRecord         - the struct can be used like a value in C (and
                            therefore also like a reference in C via a pointer);

      Record {dup, free}  - the struct can only be used like a reference in C
                            via a pointer, where C functions `dup` and `free`
                            duplicate (or ref) and free (or unref) such a struct
                            in C;

      DisguisedRecord     - the struct is opaque and is just a pointer in C.


Placeholders

  StructName = GIBaseInfo.getName structInfo

  StructNamespace = GIBaseInfo.getNamespace structInfo

  StructCPrefix = GIRepository.getCPrefix repo <StructNamespace>

  optGetTypeSymbol = GIRegisteredTypeInfo.getTypeInit structInfo


Conditions

  isGObject = "GObject" = StructNamespace


==Record signature==

signature <STRUCT_NAMESPACE>_<STRUCT_NAME>_RECORD =
  sig
                                                               -.
    include VALUE_RECORD                                        | structType = ValueRecord
                                                               -'
                                                               -.
    include RECORD                                              | structType <> ValueRecord
                                                               -'
                                                               -.                -.
    type ('a, 'b) value_accessor                                |                 |
    val t : (t, t) value_accessor                               | isGObject       |
    val tOpt : (t option, t option) value_accessor              |                 |
                                                               -'                 | optGetTypeSymbol is SOME _
                                                               -.                 |
    val t : (t, t) GObject.Value.accessor                       | not isGObject   |
    val tOpt : (t option, t option) GObject.Value.accessor      |                 |
                                                               -'                -'
  end


==Record structure==

structure <StructNamespace><StructName>Record :>
  <STRUCT_NAMESPACE>_<STRUCT_NAME>_RECORD
                                                                          -.
    where type ('a, 'b) value_accessor = ('a, 'b) GObjectValue.accessor    | isGObject
                                                                          -'
=
  struct
                                                                                                                -.
    structure Pointer = CPointerInternal                                                                         |
    type notnull = Pointer.notnull                                                                               | structType is ValueRecord | Record _
    type 'a p = 'a Pointer.p                                                                                     |
                                                                                                                -'
                                                                                                                -.
    val cPtr = Pointer.PolyML.cVal : notnull p PolyMLFFI.conversion                                              |
                                                                                                                 |
    local                                                                                                        |
      open PolyMLFFI                                                                                             |
    in                                                                                                           |
                                                                                          -.                     |
      val new_ =                                                                           |                     |
        call                                                                               |                     |
          (getSymbol "giraffe_<struct_namespace>_<struct_name>_new")                       |                     |
          (cVoid --> cPtr)                                                                 |                     |
                                                                                           |                     |
      val copy_ =                                                                          |                     |
        call                                                                               |                     |
          (getSymbol "giraffe_<struct_namespace>_<struct_name>_copy")                      |                     |
          (cPtr &&> cPtr --> cVoid)                                                        |                     |
                                                                                           | structType is       |
      val free_ =                                                                          |  ValueRecord        |
        call                                                                               |                     |
          (getSymbol "giraffe_<struct_namespace>_<struct_name>_free")                      |                     |
          (cPtr --> cVoid)                                                                 |                     |
                                                                                           |                     |
      val size_ =                                                                          |                     | Poly/ML only
        call                                                                               |                     |
          (getSymbol "giraffe_<struct_namespace>_<struct_name>_size")                      |                     | structType is ValueRecord | Record _
          (cVoid --> GUInt.PolyML.cVal)                                                    |                     |
                                                                                          -'                     |
                                                                                          -.                     |
      val dup_ =                                                                           |                     |
        call                                                                               |                     |
          (getSymbol "<dup>")                                                              |                     |
          (cPtr --> cPtr)                                                                  | structType is       |
                                                                                           |  Record {dup, free} |
      val free_ =                                                                          |                     |
        call                                                                               |                     |
          (getSymbol "<free>")                                                             |                     |
          (cPtr --> cVoid)                                                                 |                     |
                                                                                          -'                     |
    end                                                                                                          |
                                                                                                                -'
                                                                                          -.                    -.
    val new_ =                                                                             |                     |
      _import "giraffe_<struct_namespace>_<struct_name>_new" : unit -> notnull p;          |                     |
                                                                                           |                     |
    val copy_ =                                                                            |                     |
      fn x1 & x2 =>                                                                        |                     |
        (_import "giraffe_<struct_namespace>_<struct_name>_copy" : notnull p * notnull p -> unit;)               |
        (x1, x2)                                                                           |                     |
                                                                                           | structType is       |
    val free_ =                                                                            |  ValueRecord        | MLton only
      _import "giraffe_<struct_namespace>_<struct_name>_free" : notnull p -> unit;         |                     |
                                                                                           |                     |
    val size_ =                                                                            |                     |
      _import "giraffe_<struct_namespace>_<struct_name>_size" : unit -> GUInt.FFI.val_;    |                     |
                                                                                          -'                     |
                                                                                          -.                     |
    val dup_ = _import "<dup>" : notnull p -> notnull p;                                   | structType is       |
                                                                                           |  Record {dup, free} |
    val free_ = _import "<free>" : notnull p -> unit;                                      |                     |
                                                                                          -'                    -'
                                                                                          -.
    structure Record =                                                                     |
      BoxedValueRecord(                                                                    |
        structure Pointer = Pointer                                                        |
        type notnull = notnull                                                             |
        type 'a p = 'a p                                                                   |
        val new_ = new_                                                                    |
        val copy_ = copy_                                                                  | structType is ValueRecord
        val take_ = ignore                                                                 |
        val clear_ = ignore                                                                |
        val free_ = free_                                                                  |
        val size_ = size_                                                                  |
      )                                                                                    |
                                                                                          -'
                                                                                          -.
    structure Record =                                                                     |
      BoxedRecord(                                                                         |
        structure Pointer = Pointer                                                        |
        type notnull = notnull                                                             |
        type 'a p = 'a p                                                                   | structType is Record _
        val dup_ = dup_                                                                    |
        val take_ = ignore                                                                 |
        val free_ = free_                                                                  |
      )                                                                                    |
                                                                                          -'
                                                                                          -.
    structure Record =                                                                     |
      PointerRecord(                                                                       |
        val name = "<StructNamespace>.<StructName>"                                        | structType is DisguisedRecord
      )                                                                                    |
                                                                                          -'
    open Record
                                                                            -.              -.
    local                                                                    |               |
      open PolyMLFFI                                                         |               |
    in                                                                       |               |
      val getType_ =                                                         |               |
        call                                                                 |               |
          (getSymbol "<getTypeSymbol>")                                      | Poly/ML only  |
          (PolyMLFFI.cVoid --> GObjectType.PolyML.cVal);                     |               |
                                                                             |               |
      val getValue_ =                                                        |               |
        call                                                                 |               |
          (getSymbol "g_value_get_boxed")                                    |               |
          (GObjectValueRecord.PolyML.cPtr --> PolyML.cPtr);                  |               |
                                                                             |               |
      val getOptValue_ =                                                     |               |
        call                                                                 |               |
          (getSymbol "g_value_get_boxed")                                    |               |
          (GObjectValueRecord.PolyML.cPtr --> PolyML.cOptPtr);               |               |
                                                                             |               |
      val setValue_ =                                                        |               |
        call                                                                 |               |
          (getSymbol "g_value_set_boxed")                                    |               |
          (GObjectValueRecord.PolyML.cPtr &&> PolyML.cPtr --> PolyMLFFI.cVoid);              |
                                                                             |               |
      val setOptValue_ =                                                     |               |
        call                                                                 |               |
          (getSymbol "g_value_set_boxed")                                    |               |
          (GObjectValueRecord.PolyML.cPtr &&> PolyML.cOptPtr --> PolyMLFFI.cVoid);           |
    end                                                                      |               | optGetTypeSymbol
                                                                            -'               |  is SOME getTypeSymbol
                                                                            -.               |
    val getType_ = _import "<getTypeSymbol>" : unit -> GObjectType.FFI.val_; |               |
                                                                             |               |
    val getValue_ =                                                          |               |
      _import "g_value_get_boxed" : GObjectValueRecord.FFI.p -> FFI.notnull FFI.p;           |
                                                                             |               |
    val getOptValue_ =                                                       |               |
      _import "g_value_get_boxed" : GObjectValueRecord.FFI.p -> unit FFI.p;  | MLton only    |
                                                                             |               |
    val setValue_ =                                                          |               |
      _import "g_value_set_boxed" : GObjectValueRecord.FFI.p * FFI.notnull FFI.p -> unit;    |
                                                                             |               |
    val setOptValue_ =                                                       |               |
      _import "g_value_set_boxed" : GObjectValueRecord.FFI.p * unit FFI.p -> unit;           |
                                                                            -'               |
                                                                            -.               |
    type ('a, 'b) value_accessor = ('a, 'b) GObject.Value.accessor           | isGObject     |
                                                                            -'               |
    val t =                                                                                  |
      GObjectValue.C.createAccessor {                                                        |
        getType  = (I ---> GObjectType.FFI.fromVal) getType_,                                |
        getValue = (I ---> FFI.fromPtr false) getValue_,                                     |
        setValue = (I &&&> FFI.withPtr ---> I) setValue_                                     |
      }                                                                                      |
    val tOpt =                                                                               |
      GObjectValue.C.createAccessor {                                                        |
        getType  = (I ---> GObjectType.FFI.fromVal) getType_,                                |
        getValue = (I ---> FFI.fromOptPtr false) getOptValue_,                               |
        setValue = (I &&&> FFI.withOptPtr ---> I) setOptValue_                               |
      }                                                                                      |
                                                                                            -'
  end


==Struct signature==

signature <STRUCT_NAMESPACE>_<STRUCT_NAME> =
  sig
    (* Local Types *)

    type t

    type <varlist[1]> <local_name[1]>

    ...

    type <varlist[N]> <local_name[N]>


    (* Functions *)
                                                              -.
    val getType : unit -> <type>                               | optGetTypeSymbol is SOME _
                                                              -'
    <FunctionSpec[1]>

    ...

    <FunctionSpec[M]>
  end


where


  type
    is defined as follows:

        GObject.Type.t
          if not isGObject

        type_t
          if isGObject


  localName[n], typeName[n], t[n], varlist[n]
    For n in 1 .. N

      <varlist[n]> <local_name[n]>

    is the <n>th element in the list of types referenced later in the
    signature that, for some InterfaceName and some var,
    has one of the following forms:

      <var> <interface_name>_class
      <var> <interface_name>_union
      <interface_name>_t

    where the corresponding global type has the form

      <StructNamespace>.<TypeName[n]>.<t[n]>


==Struct structure==

structure <StructNamespace><StructName> :>
  <STRUCT_NAMESPACE>_<STRUCT_NAME>
    where type t = <StructNamespace><StructName>Record.t

    where type <varlist[1]> <local_name[1]> = <varlist[1]> <StructNamespace><TypeName[1]>.<t[1]>

    ...

    where type <varlist[N]> <local_name[N]> = <varlist[N]> <StructNamespace><TypeName[N]>.<t[N]>
=
  struct
    (* Low-Level Functions *)

    local                                                                                 -.
      open PolyMLFFI                                                                       |
    in                                                                                     |
                                                              -.                           |
      val getType_ =                                           |                           |
        call                                                   | optGetTypeSymbol          |
          (getSymbol "<getTypeSymbol>")                        |  is SOME getTypeSymbol    |
          (PolyMLFFI.cVoid --> GObjectType.PolyML.cVal);       |                           |
                                                              -'                           | Poly/ML only
                                                                                           |
      <LowLevelFunction[1]>                                                                |
                                                                                           |
      ...                                                                                  |
                                                                                           |
      <LowLevelFunction[M]>                                                                |
    end                                                                                   -'

                                                              -.                          -.
    val getType_ =                                             | optGetTypeSymbol          |
      _import "<getTypeSymbol>" : unit -> GObjectType.C.val_;  |  is SOME getTypeSymbol    |
                                                              -'                           |
                                                                                           | MLton only
    <LowLevelFunction[1]>                                                                  |
                                                                                           |
    ...                                                                                    |
                                                                                           |
    <LowLevelFunction[M]>                                                                 -'


    (* Local Types *)

    type t = <StructNamespace><StructName>Record.t

    type <varlist[1]> <local_name[1]> = <varlist[1]> <StructNamespace[1]><TypeName[1]>.<t[1]>

    ...

    type <varlist[N]> <local_name[N]> = <varlist[N]> <StructNamespace[N]><TypeName[N]>.<t[N]>


    (* High-Level Functions *)
                                                              -. 
    val getType = (I ---> GObjectType.C.fromVal) getType_      | optGetTypeSymbol is SOME _
                                                              -'
    <HighLevelFunction[1]>

    ...

    <HighLevelFunction[M]>
  end


where


  localName[n], typeName[n], t[n], varlist[n] are the same as for the signature;


  ...
