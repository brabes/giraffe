=Struct=

Context

  repo
    the repository in use

  structInfo
    the struct typelib info

  structType
    extra information provided as part of codegen configuration indicating the
    struct type as follows:

      ValueRecord funcs
        The struct can be used like a value in C (and therefore also like a
        reference in C via a pointer).  The struct may own references to
        other data in which case a deep copy is required when copying the
        struct and references to other data must be cleared before freeing
        the struct itself.  To support this, `funcs` is as follows:

          Deep {copy, clear}
            The C function `copy` performs a deep copy and the C function
            `clear` removes all references to other data.

          Flat
            In the common case that the struct does not own references to
            other data, memcpy can be used to copy and there is no other
            referenced data to clear.

      Record funcs
        The struct can only be used like a reference in C via a pointer, where
        the functions to duplicate (or ref) and free (or unref) the struct are
        determined by `funcs` as follows:

          Boxed
            The C functions `g_boxed_copy` and `g_boxed_free` are used to
            duplicate (or ref) and free (or unref) the struct respectively.

          NonBoxed {dup, free}
            The C functions `dup` and `free` is used to free are used to
            duplicate (or ref) and free (or unref) the struct respectively.

      DisguisedRecord
        The struct is disguised and is just a pointer in C.

      UnionRecord (parentUnionNamespace, parentUnionName, fieldName)
        The struct is the field of a union and is internally the same
        as the union.


Placeholders

  StructName = GIBaseInfo.getName structInfo

  StructNamespace = GIBaseInfo.getNamespace structInfo

  StructCPrefix = GIRepository.getCPrefix repo <StructNamespace>

  optGetTypeSymbol = GIRegisteredTypeInfo.getTypeInit structInfo

  structSize = StructInfo.getSie structInfo  (TYPELIB only)


Conditions

  isGObject = "GObject" = StructNamespace


==Record signature==

signature <STRUCT_NAMESPACE>_<STRUCT_NAME>_RECORD =
  sig
                                                                                 -.
    include VALUE_RECORD                                                          | structType is ValueRecord _
                                                                                 -'
                                                                                 -.
    include RECORD                                                                | structType is Record _ | DisguisedRecord
                                                                                 -'
                                                                                 -.
    type <field_name>                                                             |
                                      -.                                          |
    type 'a <parent_union_name>_union  | StructNamespace = ParentUnionNamespace   |
    include RECORD                     |                                          |
      where type t = <field_name> <parent_union_name>_union                       | structType is UnionRecord ("<ParentUnionNamespace>", "<ParentUnionName>", "<FieldName>")
                                      -'                                          |
                                      -.                                          |
    include RECORD                     | StructNamespace <> ParentUnionNamespace  |
      where type t = <field_name> <ParentUnionNamespace><ParentUnionName>.union   |
                                      -'                                         -'
                                                               -.                -.
    type ('a, 'b) value_accessor_t                              |                 |
    val t : (t, t) value_accessor_t                             | isGObject       |
    val tOpt : (t option, t option) value_accessor_t            |                 |
                                                               -'                 | optGetTypeSymbol is SOME _
                                                               -.                 |
    val t : (t, t) ValueAccessor.t                              | not isGObject   |
    val tOpt : (t option, t option) ValueAccessor.t             |                 |
                                                               -'                -'
  end


==Record structure==

structure <StructNamespace><StructName>Record :>
  <STRUCT_NAMESPACE>_<STRUCT_NAME>_RECORD
                                                                          -.
    where type ('a, 'b) value_accessor_t = ('a, 'b) ValueAccessor.t        | isGObject
                                                                          -'
                                                               -.                                               -.
    where                                                       |                                                |
      type 'a <parent_union_name>_union =                       | StructNamespace = ParentUnionNamespace         |
        'a <ParentUnionNamespace><ParentUnionName>.union        |                                                | structType is
                                                               -'                                                |  UnionRecord ("<ParentUnionNamespace>", "<ParentUnionName>", "<FieldName>")
    where type C.opt = <ParentUnionNamespace><ParentUnionName>.C.opt                                             |
    where type C.non_opt = <ParentUnionNamespace><ParentUnionName>.C.non_opt                                     |
    where type 'a C.p = 'a <ParentUnionNamespace><ParentUnionName>.C.p =                                         |
                                                                                                                -'
=
  struct
                                                                                                                -.
    structure Pointer = CPointer(GMemory)                                                                        |
    type opt = Pointer.opt                                                                                       | structType is ValueRecord _ | Record _
    type non_opt = Pointer.non_opt                                                                               |
    type 'a p = 'a Pointer.p                                                                                     |
                                                                                                                -'
                                                               -.                                               -.
    type 'a <parent_union_name>_union =                         | StructNamespace = ParentUnionNamespace         | structType is
      'a <ParentUnionNamespace><ParentUnionName>.union          |                                                |  UnionRecord ("<ParentUnionNamespace>", "<ParentUnionName>", "<FieldName>")
                                                               -'                                                |
    type <field_name> = unit                                                                                     |
    type t = <field_name> <ParentUnionNamespace><ParentUnionName>.union                                          |
                                                                                                                -'
                                                                                                                -.
    val cPtr = Pointer.PolyML.cVal : non_opt p PolyMLFFI.conversion                                              |
                                                                                                                 |
    local                                                                                                        |
      open PolyMLFFI                                                                                             |
    in                                                                                                           |
                                                                    -.                    -.                     |
      val size_ =                                                    |                     |                     |
        call                                                         | using GIR           |                     |
          (getSymbol "giraffe_<struct_namespace>_<struct_name>_size")|                     |                     |
          (cVoid --> GSize.PolyML.cVal)                              |                     |                     |
                                                                    -'                     |                     |
                                                                    -.                     |                     |
      val size_ = fn () => <structSize>                              | using TYPELIB       |                     |
                                                                    -'                     |                     |
                                                                    -.                     |                     |
      val memcpy_ =                                                  |                     |                     |
        call                                                         |                     |                     |
          (getSymbol "memcpy")                                       |                     |                     |
          (cPtr &&> cPtr &&> GSize.FFI.cVal --> cVoid)               |                     |                     |
                                                                     | funcs is Flat       |                     |
      val copy_ =                                                    |                     | structType is       |
        fn src & dest =>                                             |                     |  ValueRecord funcs  |
          memcpy_ (dest & src & size_ ())                            |                     |                     | Poly/ML only
                                                                     |                     |                     |
      val clear_ = Fn.ignore                                         |                     |                     | structType is ValueRecord _ | Record _
                                                                    -'                     |                     |
                                                                    -.                     |                     |
      val copy_ =                                                    |                     |                     |
        call                                                         |                     |                     |
          (getSymbol "<copy>")                                       |                     |                     |
          (cPtr &&> cPtr --> cVoid)                                  | funcs is            |                     |
                                                                     |  Deep {copy, clear} |                     |
      val clear_ =                                                   |                     |                     |
        call                                                         |                     |                     |
          (getSymbol "<clear>")                                      |                     |                     |
          (cPtr --> cVoid)                                           |                     |                     |
                                                                    -'                    -'                     |
                                                                    -.                    -.                     |
      val getType_ =                                                 |                     |                     |
        call                                                         |                     |                     |
          (getSymbol "<getTypeSymbol>")                              | funcs is Boxed      |                     |
          (cVoid --> GObjectType.PolyML.cVal);                       |                     |                     |
                                                                     |                     |                     |
      val dup_ =                                                     | EITHER              |                     |
        fn x1 =>                                                     |                     |                     |
          call                                                       | optGetTypeSymbol is |                     |
            (getSymbol "g_boxed_copy")                               |  SOME getTypeSymbol |                     |
            (GObjectType.PolyML.cVal &&> cPtr --> cPtr)              |                     |                     |
            (getType_ () & x1)                                       | getTypeSymbol       |                     |
                                                                     |  <> "intern"        |                     |
      val free_ =                                                    |                     |                     |
        fn x1 =>                                                     | OR                  |                     |
          call                                                       |                     |                     |
            (getSymbol "g_boxed_free")                               | raise Fail          |                     |
            (GObjectType.PolyML.cVal &&> cPtr --> cVoid)             |                     |                     |
            (getType_ () & x1)                                       |                     |                     |
                                                                    -'                     | structType is       |
                                                                    -.                     |  Record funcs       |
      val dup_ =                                                     |                     |                     |
        call                                                         |                     |                     |
          (getSymbol "<dup>")                                        |                     |                     |
          (cPtr --> cPtr)                                            | funcs is            |                     |
                                                                     |  NonBoxed           |                     |
      val free_ =                                                    |    {dup, free}      |                     |
        call                                                         |                     |                     |
          (getSymbol "<free>")                                       |                     |                     |
          (cPtr --> cVoid)                                           |                     |                     |
                                                                    -'                    -'                     |
    end                                                                                                          |
                                                                                                                -'
                                                                                          -.                    -.
                                                                    -.                     |                     |
    val size_ =                                                      |                     |                     |
      _import "giraffe_<struct_namespace>_<struct_name>_size"        | using GIR           |                     |
        : unit -> GSize.FFI.val_;                                    |                     |                     |
                                                                    -'                     |                     |
                                                                    -.                     |                     |
    val size_ = fn () => <structSize>                                | using TYPELIB       |                     |
                                                                    -'                     |                     |
                                                                    -.                     |                     |
    val memcpy_ =                                                    |                     |                     |
      fn x1 & x2 & x3 =>                                             |                     |                     |
        (_import "memcpy" : non_opt p * non_opt p * GSize.FFI.val_ -> unit;)               |                     |
          (x1, x2, x3)                                               |                     |                     |
                                                                     | funcs is Flat       | structType is       |
    val copy_ =                                                      |                     |  ValueRecord funcs  |
      fn src & dest =>                                               |                     |                     |
        memcpy_ (dest & src & size_ ())                              |                     |                     | MLton only
                                                                     |                     |                     |
    val clear_ = Fn.ignore                                           |                     |                     | structType is ValueRecord _ | Record _
                                                                    -'                     |                     |
                                                                    -.                     |                     |
    val copy_ =                                                      |                     |                     |
      fn x1 & x2 =>                                                  |                     |                     |
        (_import "<copy>" : non_opt p * non_opt p -> unit;)          | funcs is            |                     |
          (x1, x2)                                                   |  Deep {copy, clear} |                     |
                                                                     |                     |                     |
    val clear_ =                                                     |                     |                     |
      _import "<clear>" : non_opt p -> unit;                         |                     |                     |
                                                                    -'                    -'                     |
                                                                    -.                    -.                     |
    val getType_ =                                                   |                     |                     |
      _import "<getTypeSymbol>" :                                    |                     |                     |
        unit -> GObjectType.FFI.val_;                                |                     |                     |
                                                                     |                     |                     |
    val dup_ =                                                       |                     |                     |
      fn x1 =>                                                       | funcs is Boxed      |                     |
        (                                                            |                     |                     |
          fn x1 & x2 =>                                              |                     |                     |
            (_import "g_boxed_copy" :                                | EITHER              |                     |
              GObjectType.FFI.val_ * non_opt p -> non_opt p;)        |                     |                     |
              (x1, x2)                                               | optGetTypeSymbol is |                     |
        )                                                            |  SOME getTypeSymbol |                     |
          (getType_ () & x1)                                         |                     |                     |
                                                                     | getTypeSymbol       |                     |
    val free_ =                                                      |  <> "intern"        |                     |
      fn x1 =>                                                       |                     |                     |
        (                                                            | OR                  |                     |
          fn x1 & x2 =>                                              |                     |                     |
            (_import "g_boxed_free" :                                | raise Fail          |                     |
              GObjectType.FFI.val_ * non_opt p -> non_opt p;)        |                     |                     |
              (x1, x2)                                               |                     |                     |
        )                                                            |                     |                     |
          (getType_ () & x1)                                         |                     |                     |
                                                                    -'                     | structType is       |
                                                                    -.                     |  Record funcs       |
    val dup_ = _import "<dup>" : non_opt p -> non_opt p;             | funcs is            |                     |
                                                                     |  NonBoxed           |                     |
    val free_ = _import "<free>" : non_opt p -> unit;                |    {dup, free}      |                     |
                                                                    -'                    -'                    -'
                                                                                          -.
    structure Record =                                                                     |
      BoxedValueRecord(                                                                    |
        structure Pointer = Pointer                                                        |
        type opt = opt                                                                     |
        type non_opt = non_opt                                                             | structType is ValueRecord _
        type 'a p = 'a p                                                                   |
        val copy_ = copy_                                                                  |
        val clear_ = clear_                                                                |
        val size_ = size_                                                                  |
      )                                                                                    |
                                                                                          -'
                                                                                          -.
    structure Record =                                                                     |
      BoxedRecord(                                                                         |
        structure Pointer = Pointer                                                        |
        type opt = opt                                                                     |
        type non_opt = non_opt                                                             | structType is Record _
        type 'a p = 'a p                                                                   |
        val dup_ = dup_                                                                    |
        val take_ = ignore                                                                 |
        val free_ = free_                                                                  |
      )                                                                                    |
                                                                                          -'
                                                                                          -.
    structure Record =                                                                     |
      PointerRecord(                                                                       | structType is DisguisedRecord
        val name = "<StructNamespace>.<StructName>"                                        |
      )                                                                                    |
                                                                                          -'
                                                                                          -.
    structure Record = <ParentUnionNamespace><ParentUnionName>                             | structType is
                                                                                          -'  UnionRecord ("<ParentUnionNamespace>", "<ParentUnionName>", _)
    open Record
                                                                            -.              -.
    local                                                                    |               |
      open PolyMLFFI                                                         |               |
    in                                                                       |               |
                                               -.                            |               |
      val getType_ =                            |                            |               |
        call                                    | getTypeSymbol <> "intern"  |               |
          (getSymbol "<getTypeSymbol>")         | structType <> Record Boxed | Poly/ML only  |
          (cVoid --> GObjectType.PolyML.cVal);  |                            |               |
                                               -'                            |               |
                                                                             |               |
      val getValue_ =                                                        |               |
        call                                                                 |               |
          (getSymbol "g_value_get_<valueType>")                              |               |
          (GObjectValueRecord.PolyML.cPtr --> PolyML.cPtr);                  |               |
                                                                             |               |
      val getOptValue_ =                                                     |               |
        call                                                                 |               |
          (getSymbol "g_value_get_<valueType>")                              |               |
          (GObjectValueRecord.PolyML.cPtr --> PolyML.cOptPtr);               |               |
                                                                             |               |
      val setValue_ =                                                        |               |
        call                                                                 |               |
          (getSymbol "g_value_set_<valueType>")                              |               |
          (GObjectValueRecord.PolyML.cPtr &&> PolyML.cPtr --> cVoid);        |               |
                                                                             |               |
      val setOptValue_ =                                                     |               |
        call                                                                 |               |
          (getSymbol "g_value_set_<valueType>")                              |               |
          (GObjectValueRecord.PolyML.cPtr &&> PolyML.cOptPtr --> cVoid);     |               |
    end                                                                      |               | optGetTypeSymbol
                                                                            -'               |  is SOME getTypeSymbol
                                               -.                           -.               |
    val getType_ =                              | getTypeSymbol <> "intern"  |               |
      _import "<getTypeSymbol>" :               | structType <> Record Boxed |               |
        unit -> GObjectType.FFI.val_;           |                            |               |
                                               -'                            |               |
                                                                             |               |
    val getValue_ =                                                          |               |
      _import "g_value_get_<valueType>" :                                    |               |
        GObjectValueRecord.FFI.p -> FFI.non_opt FFI.p;                       |               |
                                                                             |               |
    val getOptValue_ =                                                       |               |
      _import "g_value_get_<valueType>" :                                    |               |
        GObjectValueRecord.FFI.p -> unit FFI.p;                              | MLton only    |
                                                                             |               |
    val setValue_ =                                                          |               |
      _import "g_value_set_<valueType>" :                                    |               |
        GObjectValueRecord.FFI.p * FFI.non_opt FFI.p -> unit;                |               |
                                                                             |               |
    val setOptValue_ =                                                       |               |
      _import "g_value_set_<valueType>" :                                    |               |
        GObjectValueRecord.FFI.p * unit FFI.p -> unit;                       |               |
                                                                            -'               |
                                                                            -.               |
    type ('a, 'b) value_accessor_t = ('a, 'b) ValueAccessor.t                | isGObject     |
                                                                            -'               |
    val t =                                                                                  |
      ValueAccessor.C.createAccessor {                                                       |
                                                              -.                             |
        getType  = (I ---> GObjectType.FFI.fromVal) getType_,  | getTypeSymbol <> "intern"   |
                                                              -'                             |
                                                              -.                             |
        getType  = GObjectType.<valueType>,                    | getTypeSymbol = "intern"    |
                                                              -'                             |
        getValue = (I ---> FFI.fromPtr false) getValue_,                                     |
        setValue = (I &&&> FFI.withPtr false ---> I) setValue_                               |
      }                                                                                      |
    val tOpt =                                                                               |
      ValueAccessor.C.createAccessor {                                                       |
                                                              -.                             |
        getType  = (I ---> GObjectType.FFI.fromVal) getType_,  | getTypeSymbol <> "intern"   |
                                                              -'                             |
                                                              -.                             |
        getType  = GObjectType.<valueType>,                    | getTypeSymbol = "intern"    |
                                                              -'                             |
        getValue = (I ---> FFI.fromOptPtr false) getOptValue_,                               |
        setValue = (I &&&> FFI.withOptPtr false ---> I) setOptValue_                         |
      }                                                                                      |
                                                                                            -'
  end


where


  valueType
    is defined as follows:

        variant
          if (StructNamespace, StructName) = ("GLib", "Variant")

        boxed
          otherwise


==Struct signature==

signature <STRUCT_NAMESPACE>_<STRUCT_NAME> =
  sig
    (* Local Types *)

    type t

    type <varlist[1]> <local_name[1]>

    ...

    type <varlist[N]> <local_name[N]>


    (* Functions *)
                                                          -.                           -. 
    val getType : unit -> <type>                           | getTypeSymbol <> "intern"  | optGetTypeSymbol is SOME getTypeSymbol
                                                          -'                           -'
    <FunctionSpec[1]>

    ...

    <FunctionSpec[M]>
  end


where


  type
    is defined as follows:

        GObject.Type.t
          if not isGObject

        type_t
          if isGObject


  localName[n], typeName[n], t[n], varlist[n]
    For n in 1 .. N

      <varlist[n]> <local_name[n]>

    is the <n>th element in the list of types referenced later in the
    signature that, for some InterfaceName and some var,
    has one of the following forms:

      <var> <interface_name>_class
      <var> <interface_name>_union
      <interface_name>_t

    where the corresponding global type has the form

      <StructNamespace>.<TypeName[n]>.<t[n]>


==Struct structure==

structure <StructNamespace><StructName> :>
  <STRUCT_NAMESPACE>_<STRUCT_NAME>
    where type t = <StructNamespace><StructName>Record.t

    where type <varlist[1]> <local_name[1]> = <varlist[1]> <StructNamespace><TypeName[1]>.<t[1]>

    ...

    where type <varlist[N]> <local_name[N]> = <varlist[N]> <StructNamespace><TypeName[N]>.<t[N]>
=
  struct
    (* Low-Level Functions *)

    local                                                                                               -.
      open PolyMLFFI                                                                                     |
    in                                                                                                   |
                                               -.                           -.                           |
      val getType_ =                            |                            |                           |
        call                                    | getTypeSymbol <> "intern"  | optGetTypeSymbol          |
          (getSymbol "<getTypeSymbol>")         |                            |  is SOME getTypeSymbol    |
          (cVoid --> GObjectType.PolyML.cVal);  |                            |                           |
                                               -'                           -'                           | Poly/ML only
                                                                                                         |
      <LowLevelFunction[1]>                                                                              |
                                                                                                         |
      ...                                                                                                |
                                                                                                         |
      <LowLevelFunction[M]>                                                                              |
    end                                                                                                 -'

                                               -.                           -.                          -.
    val getType_ =                              |                            | optGetTypeSymbol          |
      _import "<getTypeSymbol>" :               | getTypeSymbol <> "intern"  |  is SOME getTypeSymbol    |
        unit -> GObjectType.C.val_;             |                            |                           |
                                               -'                           -'                           |
                                                                                                         | MLton only
    <LowLevelFunction[1]>                                                                                |
                                                                                                         |
    ...                                                                                                  |
                                                                                                         |
    <LowLevelFunction[M]>                                                                               -'


    (* Local Types *)

    type t = <StructNamespace><StructName>Record.t

    type <varlist[1]> <local_name[1]> = <varlist[1]> <StructNamespace[1]><TypeName[1]>.<t[1]>

    ...

    type <varlist[N]> <local_name[N]> = <varlist[N]> <StructNamespace[N]><TypeName[N]>.<t[N]>


    (* High-Level Functions *)
                                                          -.                           -. 
    val getType = (I ---> GObjectType.C.fromVal) getType_  | getTypeSymbol <> "intern"  | optGetTypeSymbol is SOME getTypeSymbol
                                                          -'                           -'
    <HighLevelFunction[1]>

    ...

    <HighLevelFunction[M]>
  end


where


  localName[n], typeName[n], t[n], varlist[n] are the same as for the signature;


  ...
